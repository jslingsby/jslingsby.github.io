<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R Tutorials on Jasper Slingsby</title>
    <link>/categories/r-tutorials/index.xml</link>
    <description>Recent content in R Tutorials on Jasper Slingsby</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy;2016 Your name or company</copyright>
    <atom:link href="/categories/r-tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>A Primer for Handling Spatial Data in R (Updated)</title>
      <link>/post/2017-04-01-PrimerSpatialData/</link>
      <pubDate>Thu, 29 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-04-01-PrimerSpatialData/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#installing-r-and-rstudio&#34;&gt;Installing R (and RStudio)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cran-task-views-see-link-from-httpscran.r-project.org&#34;&gt;CRAN Task Views!!! (see link from &lt;a href=&#34;https://cran.r-project.org/&#34; class=&#34;uri&#34;&gt;https://cran.r-project.org/&lt;/a&gt;)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#topics-covered-by-the-spatial-task-view-which-focuses-on-analysis-of-spatial-data&#34;&gt;Topics covered by the &lt;em&gt;Spatial&lt;/em&gt; Task View, which focuses on “Analysis of Spatial Data”:&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#useful-diy-resources&#34;&gt;Useful DIY resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#a-practical-example&#34;&gt;A Practical Example!!!&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#a-quick-note-on-the-structure-of-this-tutorial&#34;&gt;A quick note on the structure of this tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-description&#34;&gt;Data Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#housekeeping&#34;&gt;Housekeeping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#getting-and-cleaning-the-data-but-first-and-foremost-projection&#34;&gt;Getting and cleaning the data, but first and foremost, &lt;em&gt;projection!!!&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lets-start-with-point-data-mostly-functions-from-libraryrgdal-and-librarysp&#34;&gt;Let’s start with point data (mostly functions from library(rgdal) and library(sp))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#raster-data-mostly-functions-from-libraryraster&#34;&gt;Raster data (mostly functions from library(raster))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#polygons&#34;&gt;Polygons!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#going-parallel&#34;&gt;Going parallel!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#animation&#34;&gt;Animation!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#some-other-data-visualization-and-analysis&#34;&gt;Some other data visualization and analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#but-what-about-our-poor-cedars&#34;&gt;But what about our poor cedars?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#options-for-writing-out-spatial-data&#34;&gt;Options for writing out spatial data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;Points, lines, polygons and rasters - R can handle them all. My aim for this tutorial is to give you the basics required to teach yourself spatial data analysis in R.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;I’ll start by briefly covering installing R, CRAN Task Views and how to install them (using the ‘Spatial’ task view as an example), followed by some pointers for useful DIY resources for handling and analyzing spatial data, and then work through a practical example exploring fire history layers (polygon), topographic (raster) and locality (point) data using the libraries ‘rgdal’, ‘raster’ and ‘sp’ and a few others. The example will cover setting and changing projections and extents, subseting polygons, raster calculations, rasterizing polygons and extracting data with a few neat tricks and visualisations along the way.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div id=&#34;installing-r-and-rstudio&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Installing R (and RStudio)&lt;/h3&gt;
&lt;p&gt;You can download R for Windows, Mac or Linux from &lt;a href=&#34;https://cran.r-project.org/&#34;&gt;&lt;strong&gt;The Comprehensive R Archive Network (CRAN) at https://cran.r-project.org/&lt;/strong&gt;&lt;/a&gt; and install.&lt;/p&gt;
&lt;p&gt;Base R can be quite clunky to deal with, so there is a range of additional software packages designed to help you manage your R code, plots, projects etc. One of the better ones (i.e. the one that I use and I’m clearly not bias) is &lt;a href=&#34;https://www.rstudio.com/products/RStudio/&#34;&gt;&lt;strong&gt;RStudio (www.rstudio.com)&lt;/strong&gt;&lt;/a&gt;. You want to download the Open Source version of RStudio Desktop. When you open RStudio after installing you’ll see that it has opened R in the “Console” window.&lt;/p&gt;
&lt;p&gt;Note that the base version of R is as small as possible, trimmed down to only the essential functions etc. More advanced and user specific functions are available as “Contributed Extension Packages” or “libraries”. You can access the list of packages from &lt;a href=&#34;https://cran.r-project.org/&#34; class=&#34;uri&#34;&gt;https://cran.r-project.org/&lt;/a&gt;. At the time of writing there were almost 11 000 packages and growing!!! This can be quite bewildering if you’re not sure what you need, but fortunately there are…&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;cran-task-views-see-link-from-httpscran.r-project.org&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;CRAN Task Views!!! (see link from &lt;a href=&#34;https://cran.r-project.org/&#34; class=&#34;uri&#34;&gt;https://cran.r-project.org/&lt;/a&gt;)&lt;/h2&gt;
&lt;p&gt;Some great fellas have taken the time to sift through all the R libraries and make some sense of them for different focal topics and created “Task Views” &lt;br&gt;&lt;/p&gt;
&lt;p&gt;Each Task View has a landing page with an overview highlighting what you can do with the different packages and their respective strengths, weaknesses etc., e.g. &lt;br&gt; &lt;br&gt;&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/CRAN_spatial.jpg&#34; /&gt;

&lt;/div&gt;
&lt;div id=&#34;topics-covered-by-the-spatial-task-view-which-focuses-on-analysis-of-spatial-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Topics covered by the &lt;em&gt;Spatial&lt;/em&gt; Task View, which focuses on “Analysis of Spatial Data”:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Classes for spatial data&lt;/li&gt;
&lt;li&gt;Handling spatial data&lt;/li&gt;
&lt;li&gt;Reading and writing spatial data&lt;/li&gt;
&lt;li&gt;Reading and writing spatial data - other packages&lt;/li&gt;
&lt;li&gt;Visualisation&lt;/li&gt;
&lt;li&gt;Point pattern analysis&lt;/li&gt;
&lt;li&gt;Geostatistics&lt;/li&gt;
&lt;li&gt;Disease mapping and areal data analysis&lt;/li&gt;
&lt;li&gt;Spatial regression&lt;/li&gt;
&lt;li&gt;Ecological analysis&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Task Views also allow easy download and installation of all packages in a Task View using library(ctv) - see highlighted code below. But beware! It can take a while to download and install if it is a big Task View and the the Spatial one is BIG!!! You don’t need it for this tutorial, so don’t bother downloading it for now.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/CRAN_taskviews.jpg&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;useful-diy-resources&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Useful DIY resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The Analysis of Spatial Data Task View!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.neondataskills.org&#34; class=&#34;uri&#34;&gt;http://www.neondataskills.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nceas.ucsb.edu/scicomp/solutions&#34; class=&#34;uri&#34;&gt;https://www.nceas.ucsb.edu/scicomp/solutions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pakillo.github.io/R-GIS-tutorial/&#34; class=&#34;uri&#34;&gt;http://pakillo.github.io/R-GIS-tutorial/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://robinlovelace.net/&#34; class=&#34;uri&#34;&gt;http://robinlovelace.net/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://spatial.ly/&#34; class=&#34;uri&#34;&gt;http://spatial.ly/&lt;/a&gt; - For some visual R inspiration!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.googleityoumoron.com&#34; class=&#34;uri&#34;&gt;http://www.googleityoumoron.com&lt;/a&gt; - There are plenty of resources!!!&lt;/li&gt;
&lt;li&gt;Applied Spatial Data Analysis with R - R. Bivand 2013&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A very good book!&lt;br /&gt;
&lt;img src=&#34;/img/Bivand.jpg&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;a-practical-example&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;A Practical Example!!!&lt;/h2&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div id=&#34;a-quick-note-on-the-structure-of-this-tutorial&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;A quick note on the structure of this tutorial&lt;/h3&gt;
&lt;p&gt;From here this tutorial will include embedded chunks of R code and the output that R returns in little grey boxes. The R code I call starts at the beginning of the line, while each line of R’s output starts with “##”, e.g.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;1+1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Note that I occassionally include comments in the R chunks. Comments are preceded by “#”. Hopefully this will all make sense as you get into the tutorial…&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;data-description&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Data Description&lt;/h3&gt;
&lt;p&gt;For this exercise we’ll play with fine-scale locality (point) data for the critically endangered Clanwilliam cedar (&lt;em&gt;Widdringtonia cedarbergensis&lt;/em&gt;) mapped by my father for the new Cederberg hiking map (check out &lt;a href=&#34;http://www.slingsbymaps.com/&#34; class=&#34;uri&#34;&gt;http://www.slingsbymaps.com/&lt;/a&gt;; data for 1000 trees downloadable at &lt;a href=&#34;https://dl.dropboxusercontent.com/u/47937308/Cedars.kml&#34; class=&#34;uri&#34;&gt;https://dl.dropboxusercontent.com/u/47937308/Cedars.kml&lt;/a&gt;), a 90m (raster) digital elevation model (DEM) that I will show you how to download directly with R, and two “polygon” data sets consisting of mapped burn scars for CapeNature reserves (available at &lt;a href=&#34;http://bgis.sanbi.org/Projects/Detail/168&#34; class=&#34;uri&#34;&gt;http://bgis.sanbi.org/Projects/Detail/168&lt;/a&gt;) and the National Vegetation Map (available at &lt;a href=&#34;http://bgis.sanbi.org/SpatialDataset/Detail/18&#34; class=&#34;uri&#34;&gt;http://bgis.sanbi.org/SpatialDataset/Detail/18&lt;/a&gt;). You will need to download the cedar dataset into your chosen local data directory (see “datwd” below) and download the other data into your chosen GIS data directory (see “giswd” below) and unzip them. &lt;em&gt;datwd&lt;/em&gt; and &lt;em&gt;giswd&lt;/em&gt; can be the same for the purposes of this tutorial. You can download the R code (with the RMarkdown content commented out) at &lt;a href=&#34;https://dl.dropboxusercontent.com/u/47937308/PrimerSpatialData.R&#34; class=&#34;uri&#34;&gt;https://dl.dropboxusercontent.com/u/47937308/PrimerSpatialData.R&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;housekeeping&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Housekeeping&lt;/h3&gt;
&lt;p&gt;Let’s start by setting our working directories. I usually work from a “Project” in RStudio linked to a GIT repository (see &lt;a href=&#34;https://git-scm.com/&#34; class=&#34;uri&#34;&gt;https://git-scm.com/&lt;/a&gt; and &lt;a href=&#34;https://github.com/&#34; class=&#34;uri&#34;&gt;https://github.com/&lt;/a&gt;) for version control and easy code sharing/collaboration. I’m not going to go there with this tutorial, but it is worth exploring if you intend to do big projects in R. R projects set the working directory to a good place automatically. Alternatively you can use the setwd() function. If I’m not in a repo or I am working with large data sets that I don’t want to replicate in every GIT repo on my hard drive I usually set separate “data”, “GIS data” (i.e. biggish data) and “results” working directories by making each path an object and inserting as appropriate for different read and write functions using paste() or paste0(). These would look something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;datwd = &amp;quot;/Users/jasper/Dropbox/SAEON/Training/SpatialDataPrimer/Example/Data/&amp;quot;  
giswd = &amp;quot;/Users/jasper/Documents/GIS/&amp;quot;   
reswd = &amp;quot;/Users/jasper/Dropbox/SAEON/Training/SpatialDataPrimer/Example/Results/&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But! This is not useful if I’m sharing the project or work on multiple machines. In this case it’s better to identify the machine/user using Sys.getenv() and wrap the code in an if() statement for each user like so:&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (Sys.getenv(&amp;quot;USER&amp;quot;)==&amp;#39;jasper&amp;#39;) {datwd=&amp;quot;/Users/jasper/Dropbox/SAEON/Training/SpatialDataPrimer/Example/Data/&amp;quot;
giswd=&amp;quot;/Users/jasper/Documents/GIS/&amp;quot;
reswd=&amp;quot;/Users/jasper/Dropbox/SAEON/Training/SpatialDataPrimer/Example/Results/&amp;quot;}
if (Sys.getenv(&amp;quot;USER&amp;quot;)==&amp;#39;MACUseR&amp;#39;) {datwd=&amp;quot;&amp;quot;; giswd=&amp;quot;&amp;quot;; reswd=&amp;quot;&amp;quot;} #For Mac/Linux users
if (Sys.getenv(&amp;quot;USERNAME&amp;quot;)==&amp;#39;WINDOZEUseR&amp;#39;) {datwd=&amp;quot;&amp;quot;; giswd=&amp;quot;&amp;quot;; reswd=&amp;quot;&amp;quot;} #For Windows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;This way a new project member can add a new line of code without deleting anything, and it only sets the working directories (and any other settings you want) for the appropriate user - i.e. the if() statement ignores settings for all other users. NOTE!!! the “USER/USERNAME” difference for Mac vs Windows (I’m pretty sure Linux is the same as Mac, but try Sys.getenv() and see what you get).&lt;/p&gt;
&lt;p&gt;Set your username and working directories here. You can just set &lt;em&gt;datwd&lt;/em&gt;, &lt;em&gt;giswd&lt;/em&gt; and &lt;em&gt;reswd&lt;/em&gt; to the same file path for the purposes of this tutorial. Don’t forget to add the “/” at the end!&lt;/p&gt;
&lt;p&gt;Note that we use single forwardslashes “/”. Windows likes to use single backslashes, but R (and just about every other computer programme in the world) doesn’t like this. You can use double backslashes on Windows if you must.&lt;/p&gt;
&lt;p&gt;Now we can call the extention libraries we’ll need for this session. You should install these before running this code using install.packages() while connected to the internet - e.g. install.packages(“raster”). Note that one occasionally encounters issues installing doMC, but you can usually install it from their development page using install.packages(“doMC”, repos=“&lt;a href=&#34;http://R-Forge.R-project.org&#34; class=&#34;uri&#34;&gt;http://R-Forge.R-project.org&lt;/a&gt;”). If neither of these work for you don’t worry, it is not an essential component of the tutorial.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(raster, quietly = T) # To handle rasters
library(rasterVis, quietly = T) # For fancy raster visualisations
library(rgdal, quietly = T) # To communicate with GDAL and handle shape files&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## rgdal: version: 1.2-7, (SVN revision 660)
##  Geospatial Data Abstraction Library extensions to R successfully loaded
##  Loaded GDAL runtime: GDAL 2.1.3, released 2017/20/01
##  Path to GDAL shared files: /Library/Frameworks/R.framework/Versions/3.4/Resources/library/rgdal/gdal
##  Loaded PROJ.4 runtime: Rel. 4.9.3, 15 August 2016, [PJ_VERSION: 493]
##  Path to PROJ.4 shared files: /Library/Frameworks/R.framework/Versions/3.4/Resources/library/rgdal/proj
##  Linking to sp version: 1.2-4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(sp, quietly = T) # To handle shapefiles
library(doMC, quietly = T) # To run code in parallel
library(animation, quietly = T) # To make fancy animations...
library(dismo, quietly = T) # For fancy tricks in Google Earth
library(googleVis, quietly = T) # For even more fancy tricks in Google Earth&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Creating a generic function for &amp;#39;toJSON&amp;#39; from package &amp;#39;jsonlite&amp;#39; in package &amp;#39;googleVis&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Welcome to googleVis version 0.6.2
## 
## Please read Google&amp;#39;s Terms of Use
## before you start using the package:
## https://developers.google.com/terms/
## 
## Note, the plot method of googleVis will by default use
## the standard browser to display its output.
## 
## See the googleVis package vignettes for more details,
## or visit http://github.com/mages/googleVis.
## 
## To suppress this message use:
## suppressPackageStartupMessages(library(googleVis))&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;getting-and-cleaning-the-data-but-first-and-foremost-projection&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Getting and cleaning the data, but first and foremost, &lt;em&gt;projection!!!&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;R typically uses the PROJ.4 conventions for cartographic projections (or coordinate reference systems - CRS). Check out &lt;a href=&#34;http://proj4js.org&#34; class=&#34;uri&#34;&gt;http://proj4js.org&lt;/a&gt; or &lt;a href=&#34;http://spatialreference.org/&#34; class=&#34;uri&#34;&gt;http://spatialreference.org/&lt;/a&gt; or google for the “proj4string” for various coordinate reference systems.&lt;/p&gt;
&lt;p&gt;I like to set a standardized CRS as an object that I use throughout my workflow.&lt;/p&gt;
&lt;p&gt;NOTE!!! Many R functions will allow you to play with objects with different CRS resulting in GARBAGE! Others will reproject one or other of the objects for you, but this can be slow and it’s not worth taking the chance. I recommend checking and setting your CRS for all objects. You can check CRS with proj4string(), check that multiple objects have the same CRS using identicalCRS(), and reproject objects of class “Spatial” with spTransform() and objects of class “Raster” with projectRaster().&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Set a standardized projection
stdCRS &amp;lt;- &amp;quot;+proj=utm +zone=34 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs&amp;quot; 
#This is &amp;quot;EPSG:32734&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;I like to use Universal Transverse Mercator (UTM) for studies with smallish extents (~&amp;lt;100km a side) because the unit is metres and is easily interpretable. The UTM zone we’re in for this example is 34 South &lt;a href=&#34;http://whatutmzoneamiin.blogspot.co.za/p/map.html&#34; class=&#34;uri&#34;&gt;http://whatutmzoneamiin.blogspot.co.za/p/map.html&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;lets-start-with-point-data-mostly-functions-from-libraryrgdal-and-librarysp&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Let’s start with point data (mostly functions from library(rgdal) and library(sp))&lt;/h3&gt;
&lt;p&gt;Here we use readOGR() from library(rgdal) to read the points in as a shapefile. Note that readOGR() is incredibly versatile and can be used to read in all kinds of shapefiles with different features (point, line, polygon) from different software. Unfortunately some PCs struggle to automatically install the GDAL &lt;a href=&#34;http://www.gdal.org/&#34; class=&#34;uri&#34;&gt;http://www.gdal.org/&lt;/a&gt; software that is called from R, but there are plenty of online fora providing solutions. Sometimes (although this issue may be fixed) there are conflicts between library(sp) and library(rgdal) depending on what order they are called.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rawpts &amp;lt;- readOGR(dsn=paste0(datwd, &amp;quot;Cedars.kml&amp;quot;), layer=&amp;quot;Cedars.kml&amp;quot;) # A Google Earth KML file&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## OGR data source with driver: KML 
## Source: &amp;quot;/Users/jasper/Dropbox/SAEON/Training/SpatialDataPrimer/Example/Data/Cedars.kml&amp;quot;, layer: &amp;quot;Cedars.kml&amp;quot;
## with 1000 features
## It has 2 fields&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;proj4string(rawpts) # Check projection&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pts &amp;lt;- spTransform(rawpts, CRS(stdCRS)) # Do spatial transform to set projection&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Note the strange &lt;em&gt;dsn=/layer=&lt;/em&gt; syntax. This will mess with you at first!!! This syntax is used to allow the function to read in many different file formats (type “ogrDrivers()” into the console to see a list). Different drivers often require different inputs for &lt;em&gt;dsn=&lt;/em&gt; and &lt;em&gt;layer=&lt;/em&gt;. I often have to play around or ask Google before I get it right for a new file…&lt;/p&gt;
&lt;p&gt;Also note the use of the paste0(datwd, “Cedars.kml”) trick I mentioned earlier:&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;paste0(datwd, &amp;quot;Cedars.kml&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;/Users/jasper/Dropbox/SAEON/Training/SpatialDataPrimer/Example/Data/Cedars.kml&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Note that the presence and number of /’s are very important… It’s the first thing to check if you get an error.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Let’s explore our point data a little more and fiddle with different ways of making a “Spatial” object.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(pts)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;SpatialPointsDataFrame&amp;quot;
## attr(,&amp;quot;package&amp;quot;)
## [1] &amp;quot;sp&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(coordinates(pts)) # Get the spatial coordinates&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      coords.x1 coords.x2
## [1,]  318630.2   6418166
## [2,]  329096.9   6411855
## [3,]  324656.3   6423442
## [4,]  324611.6   6427641
## [5,]  324156.0   6421462
## [6,]  320746.9   6429256&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- as.data.frame(coordinates(pts)) # Extract the coordinates and make them a regular &amp;quot;data.frame&amp;quot;&amp;quot; object (as if we&amp;#39;d read in a .txt or .csv file)
class(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;data.frame&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;coordinates(x) &amp;lt;- ~ coords.x1 + coords.x2 # Set coordinates for x, making it a &amp;quot;Spatial&amp;quot; object
class(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;SpatialPoints&amp;quot;
## attr(,&amp;quot;package&amp;quot;)
## [1] &amp;quot;sp&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(x) # Note the lack of proj4string info&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Formal class &amp;#39;SpatialPoints&amp;#39; [package &amp;quot;sp&amp;quot;] with 3 slots
##   ..@ coords     : num [1:1000, 1:2] 318630 329097 324656 324612 324156 ...
##   .. ..- attr(*, &amp;quot;dimnames&amp;quot;)=List of 2
##   .. .. ..$ : chr [1:1000] &amp;quot;1&amp;quot; &amp;quot;2&amp;quot; &amp;quot;3&amp;quot; &amp;quot;4&amp;quot; ...
##   .. .. ..$ : chr [1:2] &amp;quot;coords.x1&amp;quot; &amp;quot;coords.x2&amp;quot;
##   ..@ bbox       : num [1:2, 1:2] 315518 6410827 333832 6434186
##   .. ..- attr(*, &amp;quot;dimnames&amp;quot;)=List of 2
##   .. .. ..$ : chr [1:2] &amp;quot;coords.x1&amp;quot; &amp;quot;coords.x2&amp;quot;
##   .. .. ..$ : chr [1:2] &amp;quot;min&amp;quot; &amp;quot;max&amp;quot;
##   ..@ proj4string:Formal class &amp;#39;CRS&amp;#39; [package &amp;quot;sp&amp;quot;] with 1 slot
##   .. .. ..@ projargs: chr NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;proj4string(x) &amp;lt;- stdCRS # To assign the CRS (IF IT IS KNOWN!!!)
str(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Formal class &amp;#39;SpatialPoints&amp;#39; [package &amp;quot;sp&amp;quot;] with 3 slots
##   ..@ coords     : num [1:1000, 1:2] 318630 329097 324656 324612 324156 ...
##   .. ..- attr(*, &amp;quot;dimnames&amp;quot;)=List of 2
##   .. .. ..$ : chr [1:1000] &amp;quot;1&amp;quot; &amp;quot;2&amp;quot; &amp;quot;3&amp;quot; &amp;quot;4&amp;quot; ...
##   .. .. ..$ : chr [1:2] &amp;quot;coords.x1&amp;quot; &amp;quot;coords.x2&amp;quot;
##   ..@ bbox       : num [1:2, 1:2] 315518 6410827 333832 6434186
##   .. ..- attr(*, &amp;quot;dimnames&amp;quot;)=List of 2
##   .. .. ..$ : chr [1:2] &amp;quot;coords.x1&amp;quot; &amp;quot;coords.x2&amp;quot;
##   .. .. ..$ : chr [1:2] &amp;quot;min&amp;quot; &amp;quot;max&amp;quot;
##   ..@ proj4string:Formal class &amp;#39;CRS&amp;#39; [package &amp;quot;sp&amp;quot;] with 1 slot
##   .. .. ..@ projargs: chr &amp;quot;+proj=utm +zone=34 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs +towgs84=0,0,0&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rm(x) # Remove x from R&amp;#39;s memory as we won&amp;#39;t need it again.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Note the “@” symbols revealed when we look at the data structure (str()). Many spatial data objects use “slots” to store various components of the data. The slots can be accessed using “@” like you would “$” to call a variable from a dataframe, but it is RECOMMENDED THAT YOU DON’T DO THIS… The reason being that slots were designed so that the R package developers can change the way slots work to improve efficiency, handle new or different objects etc. If you write code that accesses slots directly it may break next time the libraries are updated. There are functions for accessing all slots (e.g. proj4string(), coordinates(), etc.)&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;raster-data-mostly-functions-from-libraryraster&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Raster data (mostly functions from library(raster))&lt;/h3&gt;
&lt;p&gt;Let’s get a digital elevation model (DEM) from the SRTM90 (Shuttle Radar Topography Mission*) digital elevation database, match projection, and trim to the same extent as “pts”. We can download the data directly with R using the function getData() (type ?getData for details), but this can be slow because it downloads a much bigger area than we need. To save time I’ve downloaded the data before and saved it locally with the “path =” setting, hashed (#) out the download code so R won’t run it, and read the data in from the local source. You will need to run the hashed out code (without the hash) to download the data the first time you run this script.&lt;/p&gt;
&lt;p&gt;*Jarvis A., H.I. Reuter, A. Nelson, E. Guevara, 2008, Hole-filled seamless SRTM data V4, International Centre for Tropical Agriculture (CIAT), available from &lt;a href=&#34;http://srtm.csi.cgiar.org&#34; class=&#34;uri&#34;&gt;http://srtm.csi.cgiar.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#dem &amp;lt;- getData(&amp;#39;SRTM&amp;#39;, lon=19, lat=-32.5, path = paste0(giswd, &amp;quot;SRTM/&amp;quot;)) # download data from CGIAR website
dem &amp;lt;- raster(paste0(giswd, &amp;quot;SRTM/srtm_40_19.tif&amp;quot;)) # read in data from local source
proj4string(dem) # this is not our chosen projection for this tutorial so we need to reproject&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dem &amp;lt;- projectRaster(dem, crs=CRS(stdCRS)) # note that we use a different function for raster data than for shapefiles (points or polygon) - this can take a while...

extent(dem)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## class       : Extent 
## xmin        : -79731.16 
## xmax        : 409252.3 
## ymin        : 6109993 
## ymax        : 6681302&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;extent(pts) # so our DEM has a much larger extent than our cedars of interest and we should crop it&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## class       : Extent 
## xmin        : 315517.9 
## xmax        : 333832.2 
## ymin        : 6410827 
## ymax        : 6434186&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;E &amp;lt;- extent(pts) + c(-900, 900, -900, 900) # The second term adds a 900m buffer
dem &amp;lt;- crop(dem, E) # Crop DEM to the buffered extent&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Lets have a look?&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(dem)
points(pts, pch=20, cex=.1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-04-01-PrimerSpatialData_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Now that we have the DEM cleaned up for our study let’s use the terrain() function to calculate/extract some topographic information. Note that terrain() is based on the more versatile focal() function, should you want to design your own indices etc. Also see rasterEngine() in library(spatial.tools) which is an equivalent, but with easy parallel processing capability.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;slope &amp;lt;- terrain(dem, &amp;quot;slope&amp;quot;)
aspect &amp;lt;- terrain(dem, &amp;quot;aspect&amp;quot;)
TPI &amp;lt;- terrain(dem, &amp;quot;TPI&amp;quot;) # Topographic Position Index
TRI &amp;lt;- terrain(dem, &amp;quot;TRI&amp;quot;) # Terrain Ruggedness Index
roughness &amp;lt;- terrain(dem, &amp;quot;roughness&amp;quot;)
flowdir &amp;lt;- terrain(dem, &amp;quot;flowdir&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;But “aspect” is circular so small changes in the northern aspects (e.g. 2 to 358 degrees) look like big changes in the data. We can break aspect down into east-westness and north-southness using sin() and cos() - remember your trigonometry?&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;eastwest &amp;lt;- sin(aspect)
northsouth &amp;lt;- cos(aspect)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Now dealing with all these different rasters gets a bit cumbersome, but they have the same extent, resolution and grid so we can stack() them into one object. But first, we should make sure the data are named in a sensible way otherwise they can all end out being named “layer”…&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(eastwest)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;layer&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(northsouth) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;layer&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(dem)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;srtm_40_19&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(eastwest) &amp;lt;- &amp;quot;eastwest&amp;quot; # To rename the data in the raster
names(northsouth) &amp;lt;- &amp;quot;northsouth&amp;quot;
names(dem) &amp;lt;- &amp;quot;dem&amp;quot;
topo &amp;lt;- stack(dem, slope, eastwest, northsouth, TPI, TRI, roughness, flowdir)
topo&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## class       : RasterStack 
## dimensions  : 272, 257, 69904, 8  (nrow, ncol, ncell, nlayers)
## resolution  : 78.3, 92.4  (x, y)
## extent      : 314587.6, 334710.7, 6409924, 6435056  (xmin, xmax, ymin, ymax)
## coord. ref. : +proj=utm +zone=34 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs +towgs84=0,0,0 
## names       :         dem,       slope,    eastwest,  northsouth,         tpi,         tri,   roughness,     flowdir 
## min values  : 296.3650828,   0.0006550,  -1.0000000,  -1.0000000, -70.5164504,   0.2751995,   0.8269874,   1.0000000 
## max values  : 1956.993141,    1.122555,    1.000000,    1.000000,   91.157818,  140.499398,  438.959923,  128.000000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Another way to rename rasters in a stack
# names(topo) &amp;lt;- c(&amp;quot;name1&amp;quot;, &amp;quot;name2&amp;quot;&amp;quot;, etc)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Some other useful “raster” functions are rasterize(), aggregate() and raster calculations. Let’s calculate the tree density by 90m grid cell from the DEM.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dens &amp;lt;- rasterize(pts, dem, field=&amp;quot;Name&amp;quot;, fun=&amp;quot;count&amp;quot;)
plot(dens) # See anything? Probably not, these are 90m pixels in a large landscape...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-04-01-PrimerSpatialData_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(aggregate(dens, fact=3, fun=&amp;quot;sum&amp;quot;))  # Aggregate the 90m cells into larger 210m cells - better?&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-04-01-PrimerSpatialData_files/figure-html/unnamed-chunk-13-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(dens&amp;gt;10, col=&amp;quot;red&amp;quot;)  # Use raster calculations to subset&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-04-01-PrimerSpatialData_files/figure-html/unnamed-chunk-13-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Note that you can add, subtract, multiply and divide rasters allowing you to easily do some quite complicated calculations. Explore calc() for designing and implementing more complicated functions.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;polygons&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Polygons!&lt;/h3&gt;
&lt;p&gt;Perhaps the best place to start is the National Vegetation Map of South Africa, Lesotho and Swaziland. We need to get the data, set the CRS and crop to our area/extent of interest.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;vegmap &amp;lt;- readOGR(dsn=paste0(giswd, &amp;quot;VegMap/nvm2012beta2_wgs84_Geo/&amp;quot;), layer=&amp;quot;nvm2012beta2_wgs84_Geo&amp;quot;) # Get the data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## OGR data source with driver: ESRI Shapefile 
## Source: &amp;quot;/Users/jasper/Documents/GIS/VegMap/nvm2012beta2_wgs84_Geo/&amp;quot;, layer: &amp;quot;nvm2012beta2_wgs84_Geo&amp;quot;
## with 44822 features
## It has 21 fields&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(vegmap) # Have a look at the first 6 rows of the attribute table &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   OBJECTID_1                      NAME MAPCODE12 MPCDSUBT
## 0          0  Agulhas Limestone Fynbos      FFl1     &amp;lt;NA&amp;gt;
## 1          1  Agulhas Limestone Fynbos      FFl1     &amp;lt;NA&amp;gt;
## 2          2  Cape Seashore Vegetation      AZd3     &amp;lt;NA&amp;gt;
## 3          3  Cape Seashore Vegetation      AZd3     &amp;lt;NA&amp;gt;
## 4          4  Cape Seashore Vegetation      AZd3     &amp;lt;NA&amp;gt;
## 5          5 Overberg Sandstone Fynbos     FFs12     &amp;lt;NA&amp;gt;
##                      BIOREGION             BIOME CHANGE_VER  CHANGE_REF
## 0 South Coast Fynbos Bioregion            Fynbos       VM06 VegMap 2006
## 1 South Coast Fynbos Bioregion            Fynbos       VM06 VegMap 2006
## 2          Seashore Vegetation Azonal Vegetation       VM06 VegMap 2006
## 3          Seashore Vegetation Azonal Vegetation       VM06 VegMap 2006
## 4          Seashore Vegetation Azonal Vegetation       VM06 VegMap 2006
## 5   Southwest Fynbos Bioregion            Fynbos       VM06 VegMap 2006
##   CNSRV_TRGT SHAPE_LENG  SHAPE_AREA BIOMECODE GRPCODE               GROUP
## 0         32   5028.778   661226.69         F     FFl    Limestone Fynbos
## 1         32  25681.966 11720744.76         F     FFl    Limestone Fynbos
## 2         20   5624.948   332448.42        AZ     AZd Seashore Vegetation
## 3         20   2241.355    73488.36        AZ     AZd Seashore Vegetation
## 4         20  17366.045  1229468.26        AZ     AZd Seashore Vegetation
## 5         30   1295.837   120756.02         F     FFs    Sandstone Fynbos
##   BRGNCODE                            LEGEND VTYPSQKM12
## 0      F04   FFl 1  Agulhas Limestone Fynbos   294.4978
## 1      F04   FFl 1  Agulhas Limestone Fynbos   294.4978
## 2      AZd   AZd 3  Cape Seashore Vegetation   243.5824
## 3      AZd   AZd 3  Cape Seashore Vegetation   243.5824
## 4      AZd   AZd 3  Cape Seashore Vegetation   243.5824
## 5      F02 FFs 12  Overberg Sandstone Fynbos  1169.4725
##                         DOCLINK SUBTYPENM    BKSORT POLYSQKM
## 0 Descriptions\\FFl_1_2006.docx      &amp;lt;NA&amp;gt; 01 11 001   0.6612
## 1 Descriptions\\FFl_1_2006.docx      &amp;lt;NA&amp;gt; 01 11 001  11.7207
## 2 Descriptions\\AZd_3_2006.docx      &amp;lt;NA&amp;gt; 10 02 003   0.3324
## 3 Descriptions\\AZd_3_2006.docx      &amp;lt;NA&amp;gt; 10 02 003   0.0735
## 4 Descriptions\\AZd_3_2006.docx      &amp;lt;NA&amp;gt; 10 02 003   1.2295
## 5 Descriptions\\FFs12_2006.docx      &amp;lt;NA&amp;gt; 01 01 012   0.1208&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;extent(vegmap) # Check the extent&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## class       : Extent 
## xmin        : 16.45696 
## xmax        : 32.8914 
## ymin        : -34.8334 
## ymax        : -22.12583&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;proj4string(vegmap) # Check the projection&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;vegmap &amp;lt;- spTransform(vegmap, CRS(stdCRS)) # Reproject - This can take a while...
vegmap &amp;lt;- crop(vegmap, E) # Note that extent (E) was created earlier&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required namespace: rgeos&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Let’s plot what we’ve cropped…&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cols &amp;lt;- rainbow(length(unique(vegmap$NAME))) # Make a set of 8 colours
plot(vegmap, col = cols[as.factor(as.character(vegmap$NAME))]) # Plot the map coloured by veg type
legend(&amp;quot;bottomleft&amp;quot;, legend = levels(as.factor(as.character(vegmap$NAME))), text.col = cols, cex=.6) # Add a legend
points(pts, pch=20, cex=.1) # Add the trees&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-04-01-PrimerSpatialData_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Looks like our cedars are restricted to “Cederberg Sandstone Fynbos”, but we can test that by extracting the veg type for each tree location.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Note that there are a few ways of extracting data from spatial objects. The variants of over() are best for shapefiles
treeveg &amp;lt;- over(pts, vegmap)
treeveg2 &amp;lt;- pts %over% vegmap
identical(treeveg, treeveg2) #Same result!&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(treeveg) # We&amp;#39;ve extracted the attribute table data for the vegtypes that each tree intersects&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   OBJECTID_1                       NAME MAPCODE12 MPCDSUBT
## 1       7421 Cederberg Sandstone Fynbos      FFs4     &amp;lt;NA&amp;gt;
## 2       7421 Cederberg Sandstone Fynbos      FFs4     &amp;lt;NA&amp;gt;
## 3       7421 Cederberg Sandstone Fynbos      FFs4     &amp;lt;NA&amp;gt;
## 4       7421 Cederberg Sandstone Fynbos      FFs4     &amp;lt;NA&amp;gt;
## 5       7421 Cederberg Sandstone Fynbos      FFs4     &amp;lt;NA&amp;gt;
## 6       7421 Cederberg Sandstone Fynbos      FFs4     &amp;lt;NA&amp;gt;
##                    BIOREGION  BIOME CHANGE_VER      CHANGE_REF CNSRV_TRGT
## 1 Northwest Fynbos Bioregion Fynbos       VM09 Helme (2007) WC         29
## 2 Northwest Fynbos Bioregion Fynbos       VM09 Helme (2007) WC         29
## 3 Northwest Fynbos Bioregion Fynbos       VM09 Helme (2007) WC         29
## 4 Northwest Fynbos Bioregion Fynbos       VM09 Helme (2007) WC         29
## 5 Northwest Fynbos Bioregion Fynbos       VM09 Helme (2007) WC         29
## 6 Northwest Fynbos Bioregion Fynbos       VM09 Helme (2007) WC         29
##   SHAPE_LENG SHAPE_AREA BIOMECODE GRPCODE            GROUP BRGNCODE
## 1    1590266 2151887041         F     FFs Sandstone Fynbos      F01
## 2    1590266 2151887041         F     FFs Sandstone Fynbos      F01
## 3    1590266 2151887041         F     FFs Sandstone Fynbos      F01
## 4    1590266 2151887041         F     FFs Sandstone Fynbos      F01
## 5    1590266 2151887041         F     FFs Sandstone Fynbos      F01
## 6    1590266 2151887041         F     FFs Sandstone Fynbos      F01
##                              LEGEND VTYPSQKM12
## 1 FFs 4  Cederberg Sandstone Fynbos   2512.221
## 2 FFs 4  Cederberg Sandstone Fynbos   2512.221
## 3 FFs 4  Cederberg Sandstone Fynbos   2512.221
## 4 FFs 4  Cederberg Sandstone Fynbos   2512.221
## 5 FFs 4  Cederberg Sandstone Fynbos   2512.221
## 6 FFs 4  Cederberg Sandstone Fynbos   2512.221
##                         DOCLINK SUBTYPENM    BKSORT POLYSQKM
## 1 Descriptions\\FFs_4_2006.docx      &amp;lt;NA&amp;gt; 01 01 004 2151.887
## 2 Descriptions\\FFs_4_2006.docx      &amp;lt;NA&amp;gt; 01 01 004 2151.887
## 3 Descriptions\\FFs_4_2006.docx      &amp;lt;NA&amp;gt; 01 01 004 2151.887
## 4 Descriptions\\FFs_4_2006.docx      &amp;lt;NA&amp;gt; 01 01 004 2151.887
## 5 Descriptions\\FFs_4_2006.docx      &amp;lt;NA&amp;gt; 01 01 004 2151.887
## 6 Descriptions\\FFs_4_2006.docx      &amp;lt;NA&amp;gt; 01 01 004 2151.887&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(droplevels(treeveg$NAME)) # Note the use of droplevels! If you don&amp;#39;t do this summary() will report all ~440 vegetation types in the country where cedars do not occur too...&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##            Cederberg Sandstone Fynbos 
##                                   980 
##            Fynbos Riparian Vegetation 
##                                    14 
## Northern Inland Shale Band Vegetation 
##                                     5 
##             Olifants Sandstone Fynbos 
##                                     1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;So a few trees stray off Cederberg Sandstone Fynbos, but this could be errors in the veg mapping. Our vegmap is mostly mapped at 1:250 000 scale (i.e. ~2km error), while our tree locations are accurate to 10m…&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Now let’s play with the fire record data we downloaded earlier. Firstly we get data the data and transform to our standard CRS as for the vegmap.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Get CapeNature fire data, reproject and trim to the &amp;quot;extent&amp;quot; of pts (+ a 900m buffer)
firelayers &amp;lt;- readOGR(dsn=paste0(giswd, &amp;quot;CFR/All_fires_15_16_gw&amp;quot;), layer=&amp;quot;All_fires_15_16_gw&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## OGR data source with driver: ESRI Shapefile 
## Source: &amp;quot;/Users/jasper/Documents/GIS/CFR/All_fires_15_16_gw&amp;quot;, layer: &amp;quot;All_fires_15_16_gw&amp;quot;
## with 3719 features
## It has 16 fields
## Integer64 fields read as strings:  ID&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;proj4string(firelayers)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;firelayers &amp;lt;- spTransform(firelayers, CRS(stdCRS))
extent(firelayers)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## class       : Extent 
## xmin        : 250253.7 
## xmax        : 733752.2 
## ymin        : 6150231 
## ymax        : 6453673&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;The fire data covers all CapeNature reserves across the CFR. We could crop() to our extent (E), but there are other ways. Let’s explore and manipulate the data object a little.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#str(firelayers) # Not useful when there are many layers (e.g. fires). It just prints out all the details for each of the ~3500 separate fire layers...
firelayers # Better&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## class       : SpatialPolygonsDataFrame 
## features    : 3719 
## extent      : 250253.7, 733752.2, 6150231, 6453673  (xmin, xmax, ymin, ymax)
## coord. ref. : +proj=utm +zone=34 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs +towgs84=0,0,0 
## variables   : 16
## names       :  ID,       FIRE_CODE, Res_code,  Region, Month, Year, Res_centre,                Res_name,                   Local_desc,  Datestart, DateExting, DateWithdr,     Report_off,    Polic_case,                    IgnitionCa, ... 
## min values  :   0, ANYS/00/1986/01,     ANYS, Central,     0, 1927,   Anysberg,            Anysberg MCA,                            ?, 1927/05/28, 1940/06/27, 1944/01/16,             ??,             -, Fire operations - Block burns, ... 
## max values  : 999, WBAY/12/2015/01,     WBAY, Western,    12, 2016,   Waterval, Zuurberg Nature Reserve, Zwartnek - west of Bergplaas, 2016/07/05, 7197/07/31, 2915/09/18, Zibele Blekiwe, yb285/11/2000,             Unknown - Unknown, ...&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(firelayers)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     ID       FIRE_CODE Res_code  Region Month Year Res_centre
## 0 1340 OUTE/05/1927/01     OUTE Eastern     5 1927  Outeniqua
## 1 1112 SWBG/12/1930/01     SWBG Eastern    12 1930  Swartberg
## 2  771 SWBG/01/1931/01     SWBG Eastern     1 1931  Swartberg
## 3 1016 SWBG/08/1932/01     SWBG Eastern     8 1932  Swartberg
## 4  849 SWBG/02/1933/02     SWBG Eastern     2 1933  Swartberg
## 5  848 SWBG/02/1933/01     SWBG Eastern     2 1933  Swartberg
##                         Res_name                      Local_desc
## 0      Witfontein Nature Reserve                    3322CD - 342
## 1 Groot Swartberg Nature Reserve   Paardevley.3322BD.Fire no A1.
## 2 Groot Swartberg Nature Reserve  De Wetsvley.3322AC.Fire no A2.
## 3 Groot Swartberg Nature Reserve    Plaatberg.3321BD.Fire no.B1.
## 4 Groot Swartberg Nature Reserve    Grootvlei.3321BD.Fire no.C2.
## 5             Grootswartberg MCA Blauwpunt.3322AD-BC.Fire no C1.
##    Datestart DateExting DateWithdr Report_off Polic_case
## 0 1927/05/28       &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;
## 1 1930/12/28       &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;
## 2 1931/01/18       &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;
## 3 1932/08/17       &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;
## 4 1933/02/11       &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;
## 5 1933/02/11       &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;
##            IgnitionCa     Area_ha
## 0   Unknown - Unknown    3.852058
## 1 Natural - Lightning  172.562725
## 2 Natural - Lightning  198.357564
## 3     People - Farmer 2363.599963
## 4   Unknown - Unknown 2999.420641
## 5   Unknown - Unknown 5391.986432&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(firelayers)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;ID&amp;quot;         &amp;quot;FIRE_CODE&amp;quot;  &amp;quot;Res_code&amp;quot;   &amp;quot;Region&amp;quot;     &amp;quot;Month&amp;quot;     
##  [6] &amp;quot;Year&amp;quot;       &amp;quot;Res_centre&amp;quot; &amp;quot;Res_name&amp;quot;   &amp;quot;Local_desc&amp;quot; &amp;quot;Datestart&amp;quot; 
## [11] &amp;quot;DateExting&amp;quot; &amp;quot;DateWithdr&amp;quot; &amp;quot;Report_off&amp;quot; &amp;quot;Polic_case&amp;quot; &amp;quot;IgnitionCa&amp;quot;
## [16] &amp;quot;Area_ha&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(firelayers$Res_centre)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;factor&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;levels(firelayers$Res_centre)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Anysberg&amp;quot;           &amp;quot;Cederberg&amp;quot;          &amp;quot;De Hoop&amp;quot;           
##  [4] &amp;quot;De Mond&amp;quot;            &amp;quot;Driftsands&amp;quot;         &amp;quot;Gamkaberg&amp;quot;         
##  [7] &amp;quot;Ganzekraal&amp;quot;         &amp;quot;Geelkranz&amp;quot;          &amp;quot;Goukamma&amp;quot;          
## [10] &amp;quot;Grootvadersbosch&amp;quot;   &amp;quot;Grootwinterhoek&amp;quot;    &amp;quot;Hottentots-Holland&amp;quot;
## [13] &amp;quot;Jonkershoek&amp;quot;        &amp;quot;Kammanassie&amp;quot;        &amp;quot;Keurbooms&amp;quot;         
## [16] &amp;quot;Kogelberg&amp;quot;          &amp;quot;Limietberg&amp;quot;         &amp;quot;Marloth&amp;quot;           
## [19] &amp;quot;Matjiesrivier&amp;quot;      &amp;quot;Outeniqua&amp;quot;          &amp;quot;Riverlands&amp;quot;        
## [22] &amp;quot;Robberg&amp;quot;            &amp;quot;Swartberg&amp;quot;          &amp;quot;Towerkop&amp;quot;          
## [25] &amp;quot;Vrolijkheid&amp;quot;        &amp;quot;Walker Bay&amp;quot;         &amp;quot;Waterval&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;unique(firelayers$Res_centre)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] Outeniqua          Swartberg          Jonkershoek       
##  [4] Towerkop           Gamkaberg          Cederberg         
##  [7] Kammanassie        Kogelberg          Limietberg        
## [10] Vrolijkheid        Hottentots-Holland Grootvadersbosch  
## [13] Marloth            Grootwinterhoek    Waterval          
## [16] De Hoop            Anysberg           De Mond           
## [19] Walker Bay         Goukamma           Riverlands        
## [22] Keurbooms          Robberg            Driftsands        
## [25] Ganzekraal         Geelkranz          Matjiesrivier     
## [28] &amp;lt;NA&amp;gt;              
## 27 Levels: Anysberg Cederberg De Hoop De Mond Driftsands ... Waterval&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;We can subset shapefiles based on fields in the attribute table using indexing, e.g. where the Res_centre = Cederberg in this case.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;firelayers &amp;lt;- firelayers[which(firelayers$Res_centre==&amp;quot;Cederberg&amp;quot;),] # Note that each fire polygon is a separate row in the attribute table so R let&amp;#39;s you subset as if you were working with a normal dataframe
firelayers$Res_centre &amp;lt;- droplevels(firelayers$Res_centre) # Remove unwanted levels that were passed on from the original full extent
levels(firelayers$Res_centre)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Cederberg&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(firelayers) # Plot (without colours)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-04-01-PrimerSpatialData_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Let’s use rasterize() to create a raster of the number of fires in each 90m pixel.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;firelayers$ID &amp;lt;- 1:nrow(firelayers) # Add an unique ID for each fire
firecount &amp;lt;- rasterize(firelayers, dem, field=&amp;quot;ID&amp;quot;, fun=&amp;quot;count&amp;quot;) # A count of all fires in each pixel
plot(firecount) # Note that the extent of our firelayers is larger than the DEM, but R trims it to the smaller extent automatically
points(pts, pch=20, cex=.1) # Add the trees&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-04-01-PrimerSpatialData_files/figure-html/unnamed-chunk-20-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Now lets rasterize() each fire (date) into it’s own raster, but first we need to look at the underlying data and see if this will work…&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(firelayers)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;ID&amp;quot;         &amp;quot;FIRE_CODE&amp;quot;  &amp;quot;Res_code&amp;quot;   &amp;quot;Region&amp;quot;     &amp;quot;Month&amp;quot;     
##  [6] &amp;quot;Year&amp;quot;       &amp;quot;Res_centre&amp;quot; &amp;quot;Res_name&amp;quot;   &amp;quot;Local_desc&amp;quot; &amp;quot;Datestart&amp;quot; 
## [11] &amp;quot;DateExting&amp;quot; &amp;quot;DateWithdr&amp;quot; &amp;quot;Report_off&amp;quot; &amp;quot;Polic_case&amp;quot; &amp;quot;IgnitionCa&amp;quot;
## [16] &amp;quot;Area_ha&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;firelayers$Datestart&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   [1] 1944/01/01 &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;       1948/02/01
##   [7] 1955/02/11 1956/04/01 1956/04/15 &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;      
##  [13] 1958/03/29 &amp;lt;NA&amp;gt;       1958/04/18 1958/05/01 1958/04/17 1959/03/23
##  [19] 1959/02/09 1959/09/01 1959/10/01 1963/09/28 1963/01/10 1965/03/09
##  [25] 1965/01/29 1965/11/14 1966/10/06 1967/12/29 1967/09/06 1967/03/11
##  [31] &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;       1968/09/13 1969/09/29 1969/03/22 1969/09/29
##  [37] 1969/08/12 1969/09/29 1969/09/29 2006/03/18 2006/03/18 1970/04/21
##  [43] 1970/02/03 1970/02/05 1971/03/23 &amp;lt;NA&amp;gt;       1971/07/20 1972/10/14
##  [49] 1972/03/11 1972/12/07 &amp;lt;NA&amp;gt;       1972/05/01 1973/02/27 1973/04/24
##  [55] 1973/02/27 &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;       1974/12/09 &amp;lt;NA&amp;gt;       1975/02/15
##  [61] 1975/11/26 1975/12/12 &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;      
##  [67] 1976/01/30 1978/09/07 1978/09/18 1978/10/05 1978/09/26 1978/10/25
##  [73] 1979/12/25 1979/08/06 1979/08/24 1979/04/22 &amp;lt;NA&amp;gt;       1979/08/13
##  [79] 1979/01/03 1979/08/14 1979/08/21 1980/07/21 1980/06/02 1980/06/02
##  [85] 1980/08/14 1980/05/12 1980/08/25 1980/06/02 1980/08/21 1980/05/29
##  [91] &amp;lt;NA&amp;gt;       1981/06/10 &amp;lt;NA&amp;gt;       &amp;lt;NA&amp;gt;       1981/02/20 1982/08/16
##  [97] &amp;lt;NA&amp;gt;       1982/05/14 1982/08/23 1982/09/22 1982/08/25 1982/05/12
## [103] 1982/09/22 1982/05/14 1982/08/17 &amp;lt;NA&amp;gt;       1984/11/07 1984/03/09
## [109] 1984/03/22 1984/11/30 1985/02/02 &amp;lt;NA&amp;gt;       1985/02/02 1985/11/18
## [115] 1986/12/14 1986/01/02 1986/01/14 1987/04/13 &amp;lt;NA&amp;gt;       1987/04/03
## [121] 1987/01/24 1988/01/17 1988/12/28 1988/12/28 1988/12/28 1988/12/28
## [127] 1989/12/15 1989/01/15 1989/01/18 1989/03/09 1989/04/26 &amp;lt;NA&amp;gt;      
## [133] 1990/05/25 1991/05/12 1991/04/30 1991/05/12 1991/05/01 1991/05/12
## [139] 1991/05/12 1993/05/17 1993/01/13 1993/05/17 1993/10/27 1994/02/04
## [145] 1994/02/24 1995/12/16 &amp;lt;NA&amp;gt;       1995/05/23 1997/01/23 1998/10/15
## [151] 1998/02/15 1998/12/29 1998/05/15 1998/01/12 1998/05/15 1998/10/19
## [157] 1998/03/05 &amp;lt;NA&amp;gt;       1999/12/12 &amp;lt;NA&amp;gt;       2000/10/11 &amp;lt;NA&amp;gt;      
## [163] 2000/01/06 &amp;lt;NA&amp;gt;       2001/03/06 2001/10/04 2002/05/09 2002/01/20
## [169] 2002/04/19 2002/01/01 2002/12/06 2002/02/24 2004/12/22 2004/09/21
## [175] 2004/04/02 2005/10/11 2005/10/27 2005/03/01 2005/11/09 2005/11/28
## [181] 2005/12/01 2006/03/13 2006/02/06 2006/12/05 2006/03/28 2006/09/29
## [187] 2006/12/23 2007/10/26 2007/01/19 2007/01/05 2007/03/02 2007/03/02
## [193] 2008/02/08 2008/01/12 2008/02/07 2008/02/05 2009/12/17 2009/02/06
## [199] 2009/03/11 2009/12/10 2010/02/10 2010/02/21 2011/12/18 2011/03/16
## [205] 2011/02/18 2011/01/31 2012/02/22 2012/12/14 2012/02/21 2012/12/15
## [211] 2012/12/21 2012/11/08 2012/11/20 2013/02/02 2013/02/02 2013/12/10
## [217] 2013/02/05 2013/01/16 2013/02/05 2013/01/31 2013/03/11 2013/12/20
## [223] 2013/01/30 2013/01/25 2013/01/16 2013/01/25 2014/02/13 2014/12/19
## [229] 2014/09/22 2014/04/21 2014/02/14 2014/07/22 2015/02/21 2015/02/07
## [235] 2015/10/23 2015/09/14 2015/09/14 2015/09/14 2015/09/14 2015/11/21
## [241] 2015/09/14 2015/12/29 2015/02/20 2016/04/19 2016/01/09 2016/05/23
## [247] 2016/01/17 2016/01/17 2016/01/20 2016/03/05 2016/04/15
## 2454 Levels: 1927/05/28 1930/12/28 1931/01/18 1932/08/17 ... 2016/07/05&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum(firelayers$Area_ha[is.na(firelayers$Datestart)])/sum(firelayers$Area_ha) # Proportion of burnt area without start date...&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.07952637&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;firelayers$Year #Lets use &amp;quot;Year&amp;quot; instead...&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   [1] 1944 1945 1945 1945 1947 1948 1955 1956 1956 1958 1958 1958 1958 1958
##  [15] 1958 1958 1958 1959 1959 1959 1959 1963 1963 1965 1965 1965 1966 1967
##  [29] 1967 1967 1967 1968 1968 1969 1969 1969 1969 1969 1969 1970 1970 1970
##  [43] 1970 1970 1971 1971 1971 1972 1972 1972 1972 1972 1973 1973 1973 1974
##  [57] 1974 1974 1975 1975 1975 1975 1975 1975 1976 1976 1976 1978 1978 1978
##  [71] 1978 1978 1979 1979 1979 1979 1979 1979 1979 1979 1979 1980 1980 1980
##  [85] 1980 1980 1980 1980 1980 1980 1981 1981 1981 1981 1981 1982 1982 1982
##  [99] 1982 1982 1982 1982 1982 1982 1982 1984 1984 1984 1984 1984 1985 1985
## [113] 1985 1985 1986 1986 1986 1987 1987 1987 1987 1988 1988 1988 1988 1988
## [127] 1989 1989 1989 1989 1989 1990 1990 1991 1991 1991 1991 1991 1991 1993
## [141] 1993 1993 1993 1994 1994 1995 1995 1995 1997 1998 1998 1998 1998 1998
## [155] 1998 1998 1998 1999 1999 1999 2000 2000 2000 2000 2001 2001 2002 2002
## [169] 2002 2002 2002 2002 2004 2004 2004 2005 2005 2005 2005 2005 2005 2006
## [183] 2006 2006 2006 2006 2006 2007 2007 2007 2007 2007 2008 2008 2008 2008
## [197] 2009 2009 2009 2009 2010 2010 2011 2011 2011 2011 2012 2012 2012 2012
## [211] 2012 2012 2012 2013 2013 2013 2013 2013 2013 2013 2013 2013 2013 2013
## [225] 2013 2013 2014 2014 2014 2014 2014 2014 2015 2015 2015 2015 2015 2015
## [239] 2015 2015 2015 2015 2015 2016 2016 2016 2016 2016 2016 2016 2016&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Now we’re going to loop through our fire years and rasterize them one by one. There are some issues we need to address though:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Firstly, this may create a large object in R’s memory and slow it down. We can get around this by writing each raster out to a file. Geotif and some other formats allow writing multiple rasters to one file. We should also dump any unwanted objects from memory using rm().&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Secondly, if there are a lot of cells in the raster and/or there are a lot of layers this operation may take some time either way. If we are on a multicore machine we can speed things up by parallelizing our code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Thirdly, in this case we would like rasters for all years even if there were no fires (you’ll see why in a minute). We’ll use if() statements to identify years with no fires and fill these in with empty rasters (0’s only).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lastly, if you end out running the code multiple times then you don’t want to have to repeat big operations like this. We can use file.exists() combined with an if() statement to only run this chunk of code if the file does not exist.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;First let’s dump unwanted objects from memory and try rasterizing the fires on a single core using a normal &lt;em&gt;for&lt;/em&gt; loop.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rm(&amp;quot;aspect&amp;quot;,&amp;quot;slope&amp;quot;, &amp;quot;eastwest&amp;quot;, &amp;quot;northsouth&amp;quot;, &amp;quot;TPI&amp;quot;, &amp;quot;TRI&amp;quot;, &amp;quot;roughness&amp;quot;, &amp;quot;flowdir&amp;quot;)

years &amp;lt;- min(firelayers$Year):max(firelayers$Year) # Get the unique list of years

rfifile &amp;lt;- paste0(datwd, &amp;quot;fires_annual_90m.tif&amp;quot;) # Set a file name

system.time( # To time the process
if(!file.exists(rfifile)) { # Check if the file exists. If not, run this
td &amp;lt;- list() # Create an empty list
# Loop through years making a raster of burnt cells (1/0) for each
  for (i in 1:length(years)) { 
  y &amp;lt;- years[i] # The index year
  # If no fires that year, return a raster of zeros
  if(sum(firelayers$Year==y)==0)  
      td[[i]] &amp;lt;-  raster(extent(dem),res=res(dem),vals=0)
  # If there are fires, rasterize
  if(sum(firelayers$Year==y)&amp;gt;0) 
      td[[i]] &amp;lt;- rasterize(firelayers[which(firelayers$Year==y),],dem, field=&amp;quot;Year&amp;quot;, fun=&amp;quot;count&amp;quot;, background=0) 
  } # End loop
rfi &amp;lt;- stack(td) 
writeRaster(rfi,file=rfifile) # Write out rasters to one file
} # End if() statement
) # End timing&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##       0       0       0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Now lets try it in parallel using the &lt;em&gt;foreach/%dopar%&lt;/em&gt; loop in library(doMC)…&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;going-parallel&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Going parallel!&lt;/h3&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;registerDoMC(3) # Set the computer up as a cluster with 3 cores (I have 4, but want to save 1 for other programmes)

rfifileP &amp;lt;- paste0(datwd, &amp;quot;fires_annual_90m_parallel.tif&amp;quot;) # Set a file name

system.time( # To time the process
if(!file.exists(rfifileP)) { # Check if the file exists. If not, run this
# Start parallel processing
rfi &amp;lt;- foreach(y=years,.combine=stack,.packages=&amp;quot;raster&amp;quot;) %dopar% { 
 # Loop through years making a raster of burnt cells (1/0) for each
  # Check if there were any fires that year, if not, return zeros
  if(sum(firelayers$Year==y)==0) 
      td &amp;lt;-  raster(extent(dem),res=res(dem),vals=0)
  # If there are fires, rasterize
  if(sum(firelayers$Year==y)&amp;gt;0)
      td &amp;lt;- rasterize(firelayers[which(firelayers$Year==y),],dem, field=&amp;quot;Year&amp;quot;, fun=&amp;quot;count&amp;quot;, background=0) 
  # Return the individual raster
  return(td)
  } # End parallelized code
writeRaster(rfi,file=rfifileP) # Write out the set of rasters to one file
} # End if() statement
) # End timing&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    user  system elapsed 
##       0       0       0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Not much time difference here, but then this is a small example and most of the time is spent interpreting the input code rather than processing. Going parallel really pays when crunching big analyses…&lt;/p&gt;
&lt;p&gt;Now lets read in the data and plot them.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rfi &amp;lt;- stack(rfifile) # Read the files back in as a stack
rfi # Look at the stack&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## class       : RasterStack 
## dimensions  : 272, 257, 69904, 73  (nrow, ncol, ncell, nlayers)
## resolution  : 78.3, 92.4  (x, y)
## extent      : 314587.6, 334710.7, 6409924, 6435056  (xmin, xmax, ymin, ymax)
## coord. ref. : +proj=utm +zone=34 +south +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0 
## names       : fires_annual_90m.1, fires_annual_90m.2, fires_annual_90m.3, fires_annual_90m.4, fires_annual_90m.5, fires_annual_90m.6, fires_annual_90m.7, fires_annual_90m.8, fires_annual_90m.9, fires_annual_90m.10, fires_annual_90m.11, fires_annual_90m.12, fires_annual_90m.13, fires_annual_90m.14, fires_annual_90m.15, ...&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(rfi)=paste0(&amp;quot;Fire_&amp;quot;,years) # Add year as name for each raster
rfi &amp;lt;- crop(rfi, E) # Crop to just our area of interest (speeds things up)
plot(rfi) # Plot all layers&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-04-01-PrimerSpatialData_files/figure-html/unnamed-chunk-24-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Pretty messy… there must be a sexier way?&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;animation&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Animation!&lt;/h3&gt;
&lt;p&gt;There are more and more ways of producing cool animations and interactive graphics in R. Here’s a simple example using library(animation). Note that this reqires installing the stand-alone software &lt;a href=&#34;http://www.imagemagick.org/&#34; class=&#34;uri&#34;&gt;http://www.imagemagick.org/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if(!file.exists(paste0(reswd,&amp;quot;fires.gif&amp;quot;))) { # Check if the file exists
  saveGIF({
    for (i in 1:dim(rfi)[3]) plot(rfi[[i]],
                      main=names(rfi)[i],
                      legend.lab=&amp;quot;Fire!&amp;quot;,
                      col=rev(terrain.colors(2)),
                      breaks=c(-0.1,.1,1.1))}, 
    movie.name = paste0(reswd,&amp;quot;fires.gif&amp;quot;), 
    ani.width = 480, ani.height = 600, 
    interval=.5)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/fires.gif&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Hmm… not that impressive… What if we take advantage of raster calculations and add all the rasters leading up to each time step using sum()?&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if(!file.exists(paste0(reswd,&amp;quot;firesadded.gif&amp;quot;))) { # Check if the file exists
  saveGIF({
    for (i in 1:dim(rfi)[3]) plot(sum(rfi[[1:i]], na.rm=T), #Note the summing of rasters 1 to i
                      main=names(rfi)[i],
                      legend.lab=&amp;quot;Fire!&amp;quot;,
                      col=rev(terrain.colors(11)),
                      breaks=c(seq(-0.5,10.5,1)))}, 
    movie.name = paste0(reswd,&amp;quot;firesadded.gif&amp;quot;), 
    ani.width = 480, ani.height = 600, 
    interval=.5)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/firesadded.gif&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;some-other-data-visualization-and-analysis&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Some other data visualization and analysis&lt;/h3&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Plotting functions in library(rasterVis)
levelplot(dem)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-04-01-PrimerSpatialData_files/figure-html/unnamed-chunk-27-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;contourplot(dem)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-04-01-PrimerSpatialData_files/figure-html/unnamed-chunk-27-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;persp(dem)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-04-01-PrimerSpatialData_files/figure-html/unnamed-chunk-27-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Some fancy tricks with Google Earth…&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gbmap &amp;lt;- gmap(Mercator(rawpts), type = &amp;quot;satellite&amp;quot;)
plot(gbmap)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-04-01-PrimerSpatialData_files/figure-html/unnamed-chunk-28-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;points(Mercator(rawpts), pch = 20, col = &amp;quot;red&amp;quot;, cex=.3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-04-01-PrimerSpatialData_files/figure-html/unnamed-chunk-28-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;If you thought that was fancy, check this out! (Note that this only works for embedding into RMarkdown or an html page)&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;op &amp;lt;- options(gvis.plot.tag=&amp;quot;chart&amp;quot;) # Set gvis options for rmarkdown

points.gb &amp;lt;- as.data.frame(rawpts[sample(1:1000, 20),]) # Just select a few trees
points.gb$latlon &amp;lt;- paste(points.gb$coords.x2, points.gb$coords.x1, sep=&amp;quot;:&amp;quot;)
map.gb &amp;lt;- gvisMap(points.gb, locationvar=&amp;quot;latlon&amp;quot;, tipvar=&amp;quot;Name&amp;quot;)
plot(map.gb)&lt;/code&gt;&lt;/pre&gt;
&lt;!-- Map generated in R 3.4.0 by googleVis 0.6.2 package --&gt;
&lt;!-- Thu Jun 29 09:38:05 2017 --&gt;
&lt;!-- jsHeader --&gt;
&lt;script type=&#34;text/javascript&#34;&gt;
 
// jsData 
function gvisDataMapID97646fc946 () {
var data = new google.visualization.DataTable();
var datajson =
[
 [
-32.32895638,
19.13263525,
&#34;&#34;
],
[
-32.33576239,
19.17605099,
&#34;&#34;
],
[
-32.25526767,
19.10369737,
&#34;&#34;
],
[
-32.25379668,
19.09995477,
&#34;&#34;
],
[
-32.34949643,
19.13227819,
&#34;&#34;
],
[
-32.33297824,
19.17444348,
&#34;&#34;
],
[
-32.24217522,
19.09339992,
&#34;&#34;
],
[
-32.32533112,
19.13554602,
&#34;&#34;
],
[
-32.32282123,
19.17455279,
&#34;&#34;
],
[
-32.41672387,
19.14110275,
&#34;&#34;
],
[
-32.40863478,
19.17928187,
&#34;&#34;
],
[
-32.29132662,
19.11474482,
&#34;&#34;
],
[
-32.3432987,
19.06358107,
&#34;&#34;
],
[
-32.21653158,
19.06304431,
&#34;&#34;
],
[
-32.33951463,
19.05715916,
&#34;&#34;
],
[
-32.32137712,
19.12402882,
&#34;&#34;
],
[
-32.35027992,
19.12546108,
&#34;&#34;
],
[
-32.35753188,
19.07552947,
&#34;&#34;
],
[
-32.2567635,
19.09882483,
&#34;&#34;
],
[
-32.26120332,
19.13596777,
&#34;&#34;
] 
];
data.addColumn(&#39;number&#39;,&#39;Latitude&#39;);
data.addColumn(&#39;number&#39;,&#39;Longitude&#39;);
data.addColumn(&#39;string&#39;,&#39;Name&#39;);
data.addRows(datajson);
return(data);
}
 
// jsDrawChart
function drawChartMapID97646fc946() {
var data = gvisDataMapID97646fc946();
var options = {};
options[&#34;showTip&#34;] = true;

    var chart = new google.visualization.Map(
    document.getElementById(&#39;MapID97646fc946&#39;)
    );
    chart.draw(data,options);
    

}
  
 
// jsDisplayChart
(function() {
var pkgs = window.__gvisPackages = window.__gvisPackages || [];
var callbacks = window.__gvisCallbacks = window.__gvisCallbacks || [];
var chartid = &#34;map&#34;;
  
// Manually see if chartid is in pkgs (not all browsers support Array.indexOf)
var i, newPackage = true;
for (i = 0; newPackage &amp;&amp; i &lt; pkgs.length; i++) {
if (pkgs[i] === chartid)
newPackage = false;
}
if (newPackage)
  pkgs.push(chartid);
  
// Add the drawChart function to the global list of callbacks
callbacks.push(drawChartMapID97646fc946);
})();
function displayChartMapID97646fc946() {
  var pkgs = window.__gvisPackages = window.__gvisPackages || [];
  var callbacks = window.__gvisCallbacks = window.__gvisCallbacks || [];
  window.clearTimeout(window.__gvisLoad);
  // The timeout is set to 100 because otherwise the container div we are
  // targeting might not be part of the document yet
  window.__gvisLoad = setTimeout(function() {
  var pkgCount = pkgs.length;
  google.load(&#34;visualization&#34;, &#34;1&#34;, { packages:pkgs, callback: function() {
  if (pkgCount != pkgs.length) {
  // Race condition where another setTimeout call snuck in after us; if
  // that call added a package, we must not shift its callback
  return;
}
while (callbacks.length &gt; 0)
callbacks.shift()();
} });
}, 100);
}
 
// jsFooter
&lt;/script&gt;
&lt;!-- jsChart --&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;https://www.google.com/jsapi?callback=displayChartMapID97646fc946&#34;&gt;&lt;/script&gt;
&lt;!-- divChart --&gt;
&lt;div id=&#34;MapID97646fc946&#34; style=&#34;width: 500; height: automatic;&#34;&gt;

&lt;/div&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;options(op) # Reset gvis options to default&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;but-what-about-our-poor-cedars&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;But what about our poor cedars?&lt;/h3&gt;
&lt;p&gt;I haven’t shown you how to extract the data!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## null device 
##           1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;topo$fire &amp;lt;- firecount
topo$dens &amp;lt;- dens
plot(topo)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-04-01-PrimerSpatialData_files/figure-html/unnamed-chunk-31-1.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;/post/2017-04-01-PrimerSpatialData_files/figure-html/unnamed-chunk-31-2.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;/post/2017-04-01-PrimerSpatialData_files/figure-html/unnamed-chunk-31-3.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;/post/2017-04-01-PrimerSpatialData_files/figure-html/unnamed-chunk-31-4.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;/post/2017-04-01-PrimerSpatialData_files/figure-html/unnamed-chunk-31-5.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;/post/2017-04-01-PrimerSpatialData_files/figure-html/unnamed-chunk-31-6.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;/post/2017-04-01-PrimerSpatialData_files/figure-html/unnamed-chunk-31-7.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;/post/2017-04-01-PrimerSpatialData_files/figure-html/unnamed-chunk-31-8.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;/post/2017-04-01-PrimerSpatialData_files/figure-html/unnamed-chunk-31-9.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;/post/2017-04-01-PrimerSpatialData_files/figure-html/unnamed-chunk-31-10.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Current theories around the cedar’s decline include increased fire frequency and climate change. Here are a couple of basic hypotheses we could test:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Under increased fire frequency we would expect fewer cedars in areas where greater numbers of fires occur, but higher survival in areas with greater topographic roughness as this may provide refuge from fire (note that just the perimeters are mapped for most fires).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under climate change we may expect cedars to be more numerous at higher altitudes, at more northern latitudes, and on South-facing slopes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Here&amp;#39;s an easy way to get all data and fiddle.
dat = as.data.frame(topo) #check out ?rasterToPoints too

par(mfrow=c(2,2))
plot(dens ~ fire, data=dat)
plot(dens ~ tri, data=dat)
plot(dens ~ dem, data=dat)
plot(dens ~ northsouth, data=dat)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-04-01-PrimerSpatialData_files/figure-html/unnamed-chunk-32-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mfrow=c(1,1))

# Or just extract the locations we want (note that there&amp;#39;ll be repetition of cells with multiple cedars)
dat = as.data.frame(extract(topo, pts))

par(mfrow=c(2,2))
plot(dens ~ fire, data=dat)
plot(dens ~ tri, data=dat)
plot(dens ~ dem, data=dat)
plot(dens ~ northsouth, data=dat)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-04-01-PrimerSpatialData_files/figure-html/unnamed-chunk-32-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mfrow=c(1,1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;We can also model the species’ distribution based on these variables using functions in the package &lt;em&gt;dismo&lt;/em&gt;. Here I just do a BioClim model, but you can run many other models too. Even MaxEnt is available if you install it separately and tell R where it is on your machine.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bc &amp;lt;- bioclim(topo[[-10]], pts) # The [[-10]] tells R not to use the 10th raster (dens) in the model fitting as this would be circular...

p &amp;lt;- predict(topo, bc) # Predict potential distribution back onto base data
plot(p)
points(pts, pch=20, cex=.1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-04-01-PrimerSpatialData_files/figure-html/unnamed-chunk-33-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Type vignette(“sdm”) to get a tutorial on Species Distribution Modelling in R with dismo.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;options-for-writing-out-spatial-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Options for writing out spatial data&lt;/h3&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;?writeOGR # For shapefiles - can save in many many formats
?writeRaster # For rasters - also has many formats
?save # To write out a subset of objects from the project
?save.image # To write out the whole project with all objects (like a .mxd in ArcGIS really)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;THANKS!!!&lt;/p&gt;
&lt;p&gt;If you try this code and have issues the session info is below. Also note that all kinds of weird settings to Flash etc are required to do the gvisMap plot and it only works if embedded in an HTML webpage or similar.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sessionInfo()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 3.4.0 (2017-04-21)
## Platform: x86_64-apple-darwin15.6.0 (64-bit)
## Running under: macOS Sierra 10.12.4
## 
## Matrix products: default
## BLAS: /Library/Frameworks/R.framework/Versions/3.4/Resources/lib/libRblas.0.dylib
## LAPACK: /Library/Frameworks/R.framework/Versions/3.4/Resources/lib/libRlapack.dylib
## 
## locale:
## [1] en_GB.UTF-8/en_GB.UTF-8/en_GB.UTF-8/C/en_GB.UTF-8/en_GB.UTF-8
## 
## attached base packages:
## [1] parallel  methods   stats     graphics  grDevices utils     datasets 
## [8] base     
## 
## other attached packages:
##  [1] googleVis_0.6.2     dismo_1.1-4         animation_2.5      
##  [4] doMC_1.3.4          iterators_1.0.8     foreach_1.4.3      
##  [7] rgdal_1.2-7         rasterVis_0.41      latticeExtra_0.6-28
## [10] RColorBrewer_1.1-2  lattice_0.20-35     raster_2.5-8       
## [13] sp_1.2-4           
## 
## loaded via a namespace (and not attached):
##  [1] Rcpp_0.12.11      knitr_1.16        magrittr_1.5     
##  [4] viridisLite_0.2.0 stringr_1.2.0     tools_3.4.0      
##  [7] grid_3.4.0        rgeos_0.3-23      htmltools_0.3.6  
## [10] yaml_2.1.14       rprojroot_1.2     digest_0.6.12    
## [13] bookdown_0.4      codetools_0.2-15  evaluate_0.10    
## [16] rmarkdown_1.6     blogdown_0.0.44   stringi_1.1.5    
## [19] compiler_3.4.0    backports_1.1.0   jsonlite_1.5     
## [22] hexbin_1.27.1     zoo_1.8-0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>MODIS and Landsat primer for Hannah</title>
      <link>/post/modis-primer-for-hannah/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/modis-primer-for-hannah/</guid>
      <description>&lt;p&gt;This is a quick primer on how to handle MODIS and Landsat NDVI data from &lt;a href=&#34;https://earthengine.google.com/&#34;&gt;&lt;strong&gt;Google Earth Engine (GEE)&lt;/strong&gt;&lt;/a&gt; in R. It’s primarily for my Honours student, Hannah Simon, but I thought why not make it public for all to share? I first posted the MODIS section and had Hannah play with the Landsat data as a learning exercise, so full credit to her for the Landsat code.&lt;/p&gt;
&lt;p&gt;For a general introduction for many of the functions used and handling spatial data in general see &lt;a href=&#34;https://jslingsby.github.io/post/2017-04-01-PrimerSpatialData/&#34;&gt;&lt;strong&gt;A Primer for Handling Spatial Data in R&lt;/strong&gt;&lt;/a&gt; posted previously.&lt;/p&gt;
&lt;p&gt;We start by getting the necessary libraries:&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Get libraries
library(raster) #to handle rasters&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: methods&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: sp&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(rgdal) #to handle shapefiles&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## rgdal: version: 1.1-10, (SVN revision 622)
##  Geospatial Data Abstraction Library extensions to R successfully loaded
##  Loaded GDAL runtime: GDAL 1.11.4, released 2016/01/25
##  Path to GDAL shared files: /Library/Frameworks/R.framework/Versions/3.3/Resources/library/rgdal/gdal
##  Loaded PROJ.4 runtime: Rel. 4.9.1, 04 March 2015, [PJ_VERSION: 491]
##  Path to PROJ.4 shared files: /Library/Frameworks/R.framework/Versions/3.3/Resources/library/rgdal/proj
##  Linking to sp version: 1.2-3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(reshape) #for data wrangling
library(ggplot2) #for pretty plotting
library(animation) #for silly animations

datwd &amp;lt;- &amp;quot;/Users/jasper/Documents/GIS/CFR/MODISforHannah/&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Now let’s start with…&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div id=&#34;modis&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;MODIS&lt;/h2&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Get data
mNDVI &amp;lt;- stack(paste0(datwd, &amp;quot;2017043_MODIS_v1g_JNP_MOD_NDVI.tif&amp;quot;)) #Note that the file has multiple bands so stack() is the easiest way to read all bands

mNDVI #See what the data look like&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## class       : RasterStack 
## dimensions  : 15, 20, 300, 393  (nrow, ncol, ncell, nlayers)
## resolution  : 250, 250  (x, y)
## extent      : 361250, 366250, 6242250, 6246000  (xmin, xmax, ymin, ymax)
## coord. ref. : +proj=utm +zone=34 +south +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0 
## names       : X2017043_//MOD_NDVI.1, X2017043_//MOD_NDVI.2, X2017043_//MOD_NDVI.3, X2017043_//MOD_NDVI.4, X2017043_//MOD_NDVI.5, X2017043_//MOD_NDVI.6, X2017043_//MOD_NDVI.7, X2017043_//MOD_NDVI.8, X2017043_//MOD_NDVI.9, X2017043_//OD_NDVI.10, X2017043_//OD_NDVI.11, X2017043_//OD_NDVI.12, X2017043_//OD_NDVI.13, X2017043_//OD_NDVI.14, X2017043_//OD_NDVI.15, ... 
## min values  :                -32768,                -32768,                -32768,                -32768,                -32768,                -32768,                -32768,                -32768,                -32768,                -32768,                -32768,                -32768,                -32768,                -32768,                -32768, ... 
## max values  :                 32767,                 32767,                 32767,                 32767,                 32767,                 32767,                 32767,                 32767,                 32767,                 32767,                 32767,                 32767,                 32767,                 32767,                 32767, ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;So we’ve pulled in the full record of NDVI from the “MODIS/MOD13Q1 16-day composite vegetation indices” product from the dawn of time (i.e. the 18th February 2000) until as recent as possible (6th March 2017), but you’ll notice the names in the raster, e.g. X2017043_MODIS_v1g_JNP_MOD_NDVI.1 aren’t very informative, simply numbering the layers from 1 to 393, but not giving us the dates… For some reason I still haven’t worked out how to embed the dates in the .tif raster exported from GEE, so I save them manually from the console into a text file (stone age, I know, sorry…).&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;metdat &amp;lt;- read.delim(paste0(datwd, &amp;quot;MODIS_metadata.txt&amp;quot;), sep = &amp;quot; &amp;quot;, header = F)

head(metdat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   V1    V2                                   V3 V4    V5
## 1 0: Image MODIS/MOD13Q1/MOD13Q1_005_2000_02_18 (1 band)
## 2 1: Image MODIS/MOD13Q1/MOD13Q1_005_2000_03_05 (1 band)
## 3 2: Image MODIS/MOD13Q1/MOD13Q1_005_2000_03_21 (1 band)
## 4 3: Image MODIS/MOD13Q1/MOD13Q1_005_2000_04_06 (1 band)
## 5 4: Image MODIS/MOD13Q1/MOD13Q1_005_2000_04_22 (1 band)
## 6 5: Image MODIS/MOD13Q1/MOD13Q1_005_2000_05_08 (1 band)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Still not pretty, but getting closer…&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;date &amp;lt;- substr(metdat[,3], start = 27, stop = 37)
date[1:5]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2000_02_18&amp;quot; &amp;quot;2000_03_05&amp;quot; &amp;quot;2000_03_21&amp;quot; &amp;quot;2000_04_06&amp;quot; &amp;quot;2000_04_22&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;With a bit of squint-counting and trial and error we manage to use substr() to extract the dates!&lt;/p&gt;
&lt;p&gt;But for R to treat them as dates we need to tell it they are dates with as.Date(), and specify the date format (see ?strptime).&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;date &amp;lt;- as.Date(date, format = &amp;quot;%Y_%m_%d&amp;quot;)
date[1:5]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2000-02-18&amp;quot; &amp;quot;2000-03-05&amp;quot; &amp;quot;2000-03-21&amp;quot; &amp;quot;2000-04-06&amp;quot; &amp;quot;2000-04-22&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Et voilà!&lt;/p&gt;
&lt;p&gt;So we now have a stack of MODIS NDVI images through time, and we know their dates. We can embed the dates into the raster like so:&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(mNDVI) &amp;lt;- date

mNDVI #Have another look at the data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## class       : RasterStack 
## dimensions  : 15, 20, 300, 393  (nrow, ncol, ncell, nlayers)
## resolution  : 250, 250  (x, y)
## extent      : 361250, 366250, 6242250, 6246000  (xmin, xmax, ymin, ymax)
## coord. ref. : +proj=utm +zone=34 +south +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0 
## names       : X2000.02.18, X2000.03.05, X2000.03.21, X2000.04.06, X2000.04.22, X2000.05.08, X2000.05.24, X2000.06.09, X2000.06.25, X2000.07.11, X2000.07.27, X2000.08.12, X2000.08.28, X2000.09.13, X2000.09.29, ... 
## min values  :      -32768,      -32768,      -32768,      -32768,      -32768,      -32768,      -32768,      -32768,      -32768,      -32768,      -32768,      -32768,      -32768,      -32768,      -32768, ... 
## max values  :       32767,       32767,       32767,       32767,       32767,       32767,       32767,       32767,       32767,       32767,       32767,       32767,       32767,       32767,       32767, ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Great! But now you’ll notice that the min and max values are rather strange (-32767 to 32767) when we know that NDVI can only range from -1 to 1, and rarely goes below 0. Very strange! Let’s have a look at our first image.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(mNDVI[[1]])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-04-03-modis-primer-for-hannah_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;0 to 4000? Even stranger!&lt;/p&gt;
&lt;p&gt;It turns out the issue is that GEE has exported the data in what appears to be a strange format to reduce the file size. We need to tell R how to interpret it by setting a gain and offset.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;NAvalue(mNDVI)=-32767
offs(mNDVI)=0
gain(mNDVI)=.0001
plot(mNDVI[[1]])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-04-03-modis-primer-for-hannah_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Much more reasonable!&lt;/p&gt;
&lt;p&gt;Ok, so now we can begin to look at our questions; namely, how does MODIS NDVI vary in space and time?&lt;/p&gt;
&lt;p&gt;But first, we should set our focal area.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;site &amp;lt;- readOGR(dsn=paste0(datwd, &amp;quot;Jonaskop 120m.kml&amp;quot;), layer=&amp;quot;Jonaskop 120m.kml&amp;quot;) # A Google Earth KML file&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## OGR data source with driver: KML 
## Source: &amp;quot;/Users/jasper/Documents/GIS/CFR/MODISforHannah/Jonaskop 120m.kml&amp;quot;, layer: &amp;quot;Jonaskop 120m.kml&amp;quot;
## with 1 features
## It has 2 fields&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in readOGR(dsn = paste0(datwd, &amp;quot;Jonaskop 120m.kml&amp;quot;), layer =
## &amp;quot;Jonaskop 120m.kml&amp;quot;): Z-dimension discarded&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;site &amp;lt;- spTransform(site, CRS(proj4string(mNDVI))) #Reproject to match the projection of the MODIS data (UTM 34S in this case)

plot(mNDVI[[1]])
plot(site, add=T)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-04-03-modis-primer-for-hannah_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;It looks like we’re wrangling a lot more MODIS data than we need to. Let’s crop to out focal area…&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mNDVI &amp;lt;- crop(mNDVI, site, snap = &amp;quot;out&amp;quot;) #&amp;quot;snap=&amp;quot;out&amp;quot;&amp;quot; adds a buffer around the site

plot(mNDVI[[1]])
plot(site, add=T)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-04-03-modis-primer-for-hannah_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;…and look at a few images through time.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(mNDVI) #Note that R limits it to the first 16 images&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-04-03-modis-primer-for-hannah_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Lots of variation in space! What about time?&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if(!file.exists(&amp;quot;/Users/jasper/GIT/jslingsby.github.io_local/static/img/output/mNDVI.gif&amp;quot;)) { # Check if the file exists
  saveGIF({
    for (i in 1:dim(mNDVI)[3]) plot(mNDVI[[i]],
                      main=names(mNDVI)[i],
                      legend.lab=&amp;quot;NDVI&amp;quot;,
                      col=rev(terrain.colors(length(c(seq(0,.7,.05),1)))),
                      breaks=seq(0,.7,.05))}, 
    movie.name = &amp;quot;/Users/jasper/GIT/jslingsby.github.io_local/static/img/output/mNDVI.gif&amp;quot;, 
    ani.width = 600, ani.height = 500, 
    interval=.25)
}&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/output/mNDVI.gif&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;*NOTE: this writes a .gif to file and does not render in R (or R notebook), so I had to insert it in the Markdown script.&lt;/p&gt;
&lt;p&gt;You could make it a lot prettier, but still pretty fancy. Not very useful for the print edition though. How about just a simple line graph? this requires extracting the data to a data.frame.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dat &amp;lt;- as.data.frame(mNDVI)

dat[1:10,1:10] #look at the data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    X2000.02.18 X2000.03.05 X2000.03.21 X2000.04.06 X2000.04.22 X2000.05.08
## 1       0.2889      0.3280      0.3723      0.3743      0.3979      0.3902
## 2       0.3127      0.3745      0.3850      0.3872      0.3680      0.4681
## 3       0.3205      0.3508      0.3909      0.3878      0.3647      0.4488
## 4       0.3256      0.3323      0.3823      0.4001      0.3542      0.4050
## 5       0.3206      0.3841      0.3934      0.3817      0.3864      0.3987
## 6       0.2866      0.3567      0.3723      0.3757      0.3799      0.4278
## 7       0.2866      0.3567      0.3832      0.3808      0.3510      0.4681
## 8       0.3340      0.3709      0.4215      0.3787      0.4191      0.4681
## 9       0.3205      0.4144      0.4215      0.4099      0.3900      0.4615
## 10      0.3256      0.4278      0.4363      0.4085      0.4115      0.4615
##    X2000.05.24 X2000.06.09 X2000.06.25 X2000.07.11
## 1       0.4644      0.4777      0.4730      0.4220
## 2       0.4704      0.4777      0.4730      0.4289
## 3       0.4698      0.4574      0.4340      0.4532
## 4       0.4596      0.4574      0.4636      0.4228
## 5       0.4522      0.4193      0.4636      0.4517
## 6       0.4493      0.4538      0.4091      0.4160
## 7       0.4043      0.4913      0.4730      0.4359
## 8       0.4885      0.4913      0.4616      0.4300
## 9       0.4318      0.4589      0.4908      0.4363
## 10      0.4212      0.4413      0.4697      0.4489&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;So each date is a column and each cell in space is a row in our data frame. This isn’t ideal for plotting so let’s reshape the data into long format.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rownames(dat) &amp;lt;- paste0(&amp;quot;A&amp;quot;,1:20) #Add dummy column labels

dat &amp;lt;- as.data.frame(t(dat)) #transpose data.frame

dat$Date &amp;lt;- as.Date(rownames(dat), format = &amp;quot;X%Y.%m.%d&amp;quot;)

dat &amp;lt;- melt(dat, id=c(&amp;quot;Date&amp;quot;))

head(dat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##         Date variable  value
## 1 2000-02-18       A1 0.2889
## 2 2000-03-05       A1 0.3280
## 3 2000-03-21       A1 0.3723
## 4 2000-04-06       A1 0.3743
## 5 2000-04-22       A1 0.3979
## 6 2000-05-08       A1 0.3902&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Now let’s make some pretty pictures!&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = dat, aes(x = Date, y = value, colour = variable)) + geom_line()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-04-03-modis-primer-for-hannah_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Pretty neat! It looks like our site burnt in the summer of 2000/2001. Now let’s split them up.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = dat, aes(x = Date, y = value, colour = variable)) + geom_line() + facet_wrap(~variable)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-04-03-modis-primer-for-hannah_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Well there’s definitely clear seasonality and, while subtle, there are differences among the cells. What do we see with…&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;landsat&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Landsat&lt;/h2&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;First we read in the full record of data for Landsat 8 for our area of interest.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lsNDVI &amp;lt;- stack(paste0(datwd,&amp;quot;Landsat/2017045_v1_LC8_L1T_TOA_Jonaskop_daily__2013-04-15-2017-03-25.tif&amp;quot;)) #note that I have used LC8 (LandSat 8)
lsNDVI&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## class       : RasterStack 
## dimensions  : 114, 157, 17898, 154  (nrow, ncol, ncell, nlayers)
## resolution  : 30, 30  (x, y)
## extent      : 361320, 366030, 6242370, 6245790  (xmin, xmax, ymin, ymax)
## coord. ref. : +proj=utm +zone=34 +south +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0 
## names       : X2017045_//17.03.25.1, X2017045_//17.03.25.2, X2017045_//17.03.25.3, X2017045_//17.03.25.4, X2017045_//17.03.25.5, X2017045_//17.03.25.6, X2017045_//17.03.25.7, X2017045_//17.03.25.8, X2017045_//17.03.25.9, X2017045_//7.03.25.10, X2017045_//7.03.25.11, X2017045_//7.03.25.12, X2017045_//7.03.25.13, X2017045_//7.03.25.14, X2017045_//7.03.25.15, ... 
## min values  :                -32768,                -32768,                -32768,                -32768,                -32768,                -32768,                -32768,                -32768,                -32768,                -32768,                -32768,                -32768,                -32768,                -32768,                -32768, ... 
## max values  :                 32767,                 32767,                 32767,                 32767,                 32767,                 32767,                 32767,                 32767,                 32767,                 32767,                 32767,                 32767,                 32767,                 32767,                 32767, ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Then the metadata with dates.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;metdat2 &amp;lt;- read.delim(paste0(datwd,&amp;quot;Landsat/LC8_L1T_TOA_metadata.txt&amp;quot;), sep = &amp;quot; &amp;quot;, header = F) 
head(metdat2) #first few rows of metdat&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   V1         V2
## 1 0: 2013-04-15
## 2 1: 2013-04-22
## 3 2: 2013-05-17
## 4 3: 2013-05-24
## 5 4: 2013-06-09
## 6 5: 2013-06-18&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tail(metdat2) #last few rows of metdat (our data goes up to 25th march, 2017)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       V1         V2
## 149 148: 2017-02-12
## 150 149: 2017-02-21
## 151 150: 2017-02-28
## 152 151: 2017-03-09
## 153 152: 2017-03-16
## 154 153: 2017-03-25&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Extract the dates, embed into the raster and have a look at the first scene.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;date2 &amp;lt;- substr(metdat2[,2], start = 0, stop = 10) #will extract YYYY_MM_DD
names(lsNDVI) &amp;lt;- date2 #assign the date to the &amp;#39;names&amp;#39; of each NDVI value
plot(lsNDVI[[1]]) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-04-03-modis-primer-for-hannah_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Looks good, but the scale’s all wrong again, so we need to fix the gain and offset&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;NAvalue(lsNDVI)=0
offs(lsNDVI)=-1.5
gain(lsNDVI)=.001
plot(lsNDVI[[1]])
plot(site, add=T)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-04-03-modis-primer-for-hannah_files/figure-html/unnamed-chunk-20-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Better! But still suspiscious… Note that I hacked the offset at -1.5 (it’s usually 2) I’ll need to recheck what the gain and offset values should be and fix this later…&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Now let’s zoom in on our focal site&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lsNDVI &amp;lt;- crop(lsNDVI, site, snap = &amp;quot;out&amp;quot;) #&amp;quot;snap=&amp;quot;out&amp;quot;&amp;quot; adds a buffer around the site

plot(lsNDVI[[1]])
plot(site, add=T)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-04-03-modis-primer-for-hannah_files/figure-html/unnamed-chunk-21-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Now let’s have a look at the variation in both space and time.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(lsNDVI)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-04-03-modis-primer-for-hannah_files/figure-html/unnamed-chunk-22-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Lots of errors because of NA’s! It looks like some scenes are empty, while others are dominated by cloud (we applied a cloud masking algorithm in GEE). We’ll need to get rid of these. Note that this isn’t a problem with the MODIS data, because the MODIS data are an 8-day composite based on 2 scenes per day (i.e the choice of 16 scenes to make up one complete one). We can easily exclude the blank Landsat scenes by identifying those with NA values only (if the minimum or maximum value is NA, then there are no values other than NA).&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;metdat2 &amp;lt;- metdat2[-which(is.na(minValue(lsNDVI))),] #Drop empty scenes from metadata
lsNDVI &amp;lt;- lsNDVI[[-which(is.na(minValue(lsNDVI)))]] #Drop empty scenes from rasterStack&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Now we can look at variation through time using an animation as we did before. Note that in the previous plots the colour range varies. For the animation we need to set a fixed colour range so that a particular shade of green or yellow represents the same value across scenes. For the Landsat data these range from 0.255 to 0.555&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if(!file.exists(&amp;quot;/Users/jasper/GIT/jslingsby.github.io_local/static/img/output/lsNDVI.gif&amp;quot;)) { # Check if the file exists
  saveGIF({
    for (i in 1:dim(lsNDVI)[3]) plot(lsNDVI[[i]],
                      main=names(lsNDVI)[i],
                      legend.lab=&amp;quot;NDVI&amp;quot;,
                      col=rev(terrain.colors(length(c(seq(min(minValue(lsNDVI)),max(maxValue(lsNDVI)),.01),1)))),
                      breaks=seq(min(minValue(lsNDVI)),max(maxValue(lsNDVI)),.01))}, 
    movie.name = &amp;quot;/Users/jasper/GIT/jslingsby.github.io_local/static/img/output/lsNDVI.gif&amp;quot;, 
    ani.width = 600, ani.height = 500, 
    interval=.25)
}&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/output/lsNDVI.gif&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Looks like there’s generally lower NDVI in the lower righthand corner parhaps?&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Let’s look at some time-series graphs. First the data wrangling, then plotting; following just about the same formula as for the MODIS data.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ldat &amp;lt;- as.data.frame(lsNDVI)

#ldat[1:10,1:10] #look at the data

rownames(ldat) &amp;lt;- paste0(1:nrow(ldat)) #dummy column labels

ldat &amp;lt;- as.data.frame(t(ldat)) #transpose data.frame

ldat$Date &amp;lt;- as.Date(rownames(ldat), format = &amp;quot;X%Y.%m.%d&amp;quot;)

ldat &amp;lt;- melt(ldat, id=c(&amp;quot;Date&amp;quot;))

colnames(ldat)&amp;lt;- c(&amp;quot;Date&amp;quot;,&amp;quot;Pixel.Number&amp;quot;,&amp;quot;NDVI.Value&amp;quot;)

#head(ldat)

NDVIplot2 &amp;lt;- ggplot(data = ldat, aes(x = Date, y = NDVI.Value, colour = Pixel.Number)) + geom_line() + theme(legend.position=&amp;quot;none&amp;quot;) #remove legend as plot space cannot accommodate it - there are &amp;gt;800 pixels!

NDVIplot2 &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-04-03-modis-primer-for-hannah_files/figure-html/unnamed-chunk-25-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;So we still pick up some nice seasonality! Note this is “zoom in” on just the last ~4 years. It is a bit messy with all &amp;gt;800 pixels though, so let’s select just a few.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Converting a rasterStack into a data.frame fills the dataframe with raster cell values by row from left to right and numbers them. We know there are 28 rows and 31 columns (= 868 pixels), so we can use this to sample cells of interest.&lt;/p&gt;
&lt;p&gt;This is how the grid is numbered:&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;matrix(1:868, 28, 31, byrow = T)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13]
##  [1,]    1    2    3    4    5    6    7    8    9    10    11    12    13
##  [2,]   32   33   34   35   36   37   38   39   40    41    42    43    44
##  [3,]   63   64   65   66   67   68   69   70   71    72    73    74    75
##  [4,]   94   95   96   97   98   99  100  101  102   103   104   105   106
##  [5,]  125  126  127  128  129  130  131  132  133   134   135   136   137
##  [6,]  156  157  158  159  160  161  162  163  164   165   166   167   168
##  [7,]  187  188  189  190  191  192  193  194  195   196   197   198   199
##  [8,]  218  219  220  221  222  223  224  225  226   227   228   229   230
##  [9,]  249  250  251  252  253  254  255  256  257   258   259   260   261
## [10,]  280  281  282  283  284  285  286  287  288   289   290   291   292
## [11,]  311  312  313  314  315  316  317  318  319   320   321   322   323
## [12,]  342  343  344  345  346  347  348  349  350   351   352   353   354
## [13,]  373  374  375  376  377  378  379  380  381   382   383   384   385
## [14,]  404  405  406  407  408  409  410  411  412   413   414   415   416
## [15,]  435  436  437  438  439  440  441  442  443   444   445   446   447
## [16,]  466  467  468  469  470  471  472  473  474   475   476   477   478
## [17,]  497  498  499  500  501  502  503  504  505   506   507   508   509
## [18,]  528  529  530  531  532  533  534  535  536   537   538   539   540
## [19,]  559  560  561  562  563  564  565  566  567   568   569   570   571
## [20,]  590  591  592  593  594  595  596  597  598   599   600   601   602
## [21,]  621  622  623  624  625  626  627  628  629   630   631   632   633
## [22,]  652  653  654  655  656  657  658  659  660   661   662   663   664
## [23,]  683  684  685  686  687  688  689  690  691   692   693   694   695
## [24,]  714  715  716  717  718  719  720  721  722   723   724   725   726
## [25,]  745  746  747  748  749  750  751  752  753   754   755   756   757
## [26,]  776  777  778  779  780  781  782  783  784   785   786   787   788
## [27,]  807  808  809  810  811  812  813  814  815   816   817   818   819
## [28,]  838  839  840  841  842  843  844  845  846   847   848   849   850
##       [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24]
##  [1,]    14    15    16    17    18    19    20    21    22    23    24
##  [2,]    45    46    47    48    49    50    51    52    53    54    55
##  [3,]    76    77    78    79    80    81    82    83    84    85    86
##  [4,]   107   108   109   110   111   112   113   114   115   116   117
##  [5,]   138   139   140   141   142   143   144   145   146   147   148
##  [6,]   169   170   171   172   173   174   175   176   177   178   179
##  [7,]   200   201   202   203   204   205   206   207   208   209   210
##  [8,]   231   232   233   234   235   236   237   238   239   240   241
##  [9,]   262   263   264   265   266   267   268   269   270   271   272
## [10,]   293   294   295   296   297   298   299   300   301   302   303
## [11,]   324   325   326   327   328   329   330   331   332   333   334
## [12,]   355   356   357   358   359   360   361   362   363   364   365
## [13,]   386   387   388   389   390   391   392   393   394   395   396
## [14,]   417   418   419   420   421   422   423   424   425   426   427
## [15,]   448   449   450   451   452   453   454   455   456   457   458
## [16,]   479   480   481   482   483   484   485   486   487   488   489
## [17,]   510   511   512   513   514   515   516   517   518   519   520
## [18,]   541   542   543   544   545   546   547   548   549   550   551
## [19,]   572   573   574   575   576   577   578   579   580   581   582
## [20,]   603   604   605   606   607   608   609   610   611   612   613
## [21,]   634   635   636   637   638   639   640   641   642   643   644
## [22,]   665   666   667   668   669   670   671   672   673   674   675
## [23,]   696   697   698   699   700   701   702   703   704   705   706
## [24,]   727   728   729   730   731   732   733   734   735   736   737
## [25,]   758   759   760   761   762   763   764   765   766   767   768
## [26,]   789   790   791   792   793   794   795   796   797   798   799
## [27,]   820   821   822   823   824   825   826   827   828   829   830
## [28,]   851   852   853   854   855   856   857   858   859   860   861
##       [,25] [,26] [,27] [,28] [,29] [,30] [,31]
##  [1,]    25    26    27    28    29    30    31
##  [2,]    56    57    58    59    60    61    62
##  [3,]    87    88    89    90    91    92    93
##  [4,]   118   119   120   121   122   123   124
##  [5,]   149   150   151   152   153   154   155
##  [6,]   180   181   182   183   184   185   186
##  [7,]   211   212   213   214   215   216   217
##  [8,]   242   243   244   245   246   247   248
##  [9,]   273   274   275   276   277   278   279
## [10,]   304   305   306   307   308   309   310
## [11,]   335   336   337   338   339   340   341
## [12,]   366   367   368   369   370   371   372
## [13,]   397   398   399   400   401   402   403
## [14,]   428   429   430   431   432   433   434
## [15,]   459   460   461   462   463   464   465
## [16,]   490   491   492   493   494   495   496
## [17,]   521   522   523   524   525   526   527
## [18,]   552   553   554   555   556   557   558
## [19,]   583   584   585   586   587   588   589
## [20,]   614   615   616   617   618   619   620
## [21,]   645   646   647   648   649   650   651
## [22,]   676   677   678   679   680   681   682
## [23,]   707   708   709   710   711   712   713
## [24,]   738   739   740   741   742   743   744
## [25,]   769   770   771   772   773   774   775
## [26,]   800   801   802   803   804   805   806
## [27,]   831   832   833   834   835   836   837
## [28,]   862   863   864   865   866   867   868&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;So let’s take a few from the bottom right (where the NDVI is generally low):&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lowc &amp;lt;- c(614, 617, 707, 710)
highc &amp;lt;- c(128, 131, 221, 224)

lowdat &amp;lt;- subset(ldat, Pixel.Number%in%lowc)
highdat &amp;lt;- subset(ldat, Pixel.Number%in%highc)

NDVIplot_low &amp;lt;- ggplot(data = lowdat, aes(x = Date, y = NDVI.Value, colour = Pixel.Number)) + geom_line() #+ theme(legend.position=&amp;quot;none&amp;quot;) #remove legend as plot space cannot accommodate it - there are &amp;gt;800 pixels!

NDVIplot_low &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-04-03-modis-primer-for-hannah_files/figure-html/unnamed-chunk-27-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;And a few from the top left (where the NDVI is generally high):&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;NDVIplot_high &amp;lt;- ggplot(data = highdat, aes(x = Date, y = NDVI.Value, colour = Pixel.Number)) + geom_line() #+ theme(legend.position=&amp;quot;none&amp;quot;) #remove legend as plot space cannot accommodate it - there are &amp;gt;800 pixels!

NDVIplot_high&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-04-03-modis-primer-for-hannah_files/figure-html/unnamed-chunk-28-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>